if (navigator && !navigator.cookieEnabled) {
    window.location = '/?forceRedirect=CookiesDisabled';
}
var platFormJsUrl = 'https://apis.google.com/js/platform.js';
var packageLoaded;
var createGuestUserTimer;
var generateClaimsTimer;
var isAccUserCalled = false;
var isCreateGuestInProgress = false;
var postGuestCreatedCalled = false;
var claimsPromise = undefined;
var configPromise = undefined;
var resourcePromise = undefined;
var featurePromise = undefined;
var triggerHIWStage = false;
var isRedirectDone = false;
var userUIdFrmExtrnlSite = '';
var postGuestUserTimer;
var configLoaded = false;
var resourceLoaded = false;
var reqAccountsGuestUserCreation = false;
var isHandlePostPageLoadCalled = false;
var BoldAuthCookieName = "BOLDAuth";
var environment = window.location.host.split('.')[0].replace('-builder', '');
var $html = document.documentElement;
var isLocal = window.location.host.indexOf('local') > -1;
var isPerf = window.location.host.indexOf('perf.') > -1;
var ttcEarlyExpJobTitleRect;
RDL.logMessage = " Referrer : " + document.referrer + "\n- Location : " + window.location.href;
RDL.purgedDocHandled = false;
RDL.isPurgingDocument = false;
RDL.featureUiCleanup = false;
var PushnamiID = '5d7969905d28b600124cb99b';
RDL.ExpLayerID = "";

var configuration = (function () {

    var modifyCountryWiseLocalization = function (data, configObj) {
        var countryCode = getCountryCode();
        if (countryCode && data[countryCode]) {
            Object.assign(RDL.Localization, data[countryCode]);
        }
        if (configObj && countryCode && configObj.country && configObj.country[countryCode]) {
            var countryConfigs = configObj.country[countryCode];
            if (countryConfigs.localizationToBeUsed && countryConfigs.localizationToBeUsed.length) {
                countryConfigs.localizationToBeUsed.forEach(function (el) {
                    Object.assign(RDL.Localization, data[el]);
                });
            }
        }
    }
    var modifyCountryWiseConfig = function (data) {
        var countryCode = getCountryCode();
        if (countryCode && data.country && data.country[countryCode]) {
            var countryConfigs = data.country[countryCode];
            if (RDL.ArrayFeatureSet && countryConfigs.featureToBeUpdated) {
                var featureToBeUpdated = Object.keys(countryConfigs.featureToBeUpdated);
                if (featureToBeUpdated.length) {
                    RDL.ArrayFeatureSet.forEach(function (featureSet) {
                        featureToBeUpdated.forEach(function (newFeature) {
                            if (newFeature == featureSet.featureCD) {
                                featureSet.isActive = countryConfigs.featureToBeUpdated[newFeature];
                            }
                        });
                    });
                }
            }
            if (countryConfigs.flagsToBeUpdated) {
                Object.assign(RDL, countryConfigs.flagsToBeUpdated);
            }

            if (countryConfigs.skinsToAddOrUpdate) {
                countryConfigs.skinsToAddOrUpdate.forEach(function (el) {
                    var skinIndex = -1;
                    if (RDL.useContentBlobForSVGs) {
                        el.imageURL = RDL.Paths.ResourcePath + el.blobURL;
                        el.blobURL = RDL.Paths.ResourcePath + el.blobURL;
                        el.htmlURL = getSkinHtmlPath() + el.skinCD + ".htm";
                    }
                    RDL.skins.forEach(function (skn, index) {
                        if (skn.id == el.id) {
                            skinIndex = index;
                        }
                    });
                    if (skinIndex > -1) {
                        RDL.skins[skinIndex] = el;
                    }
                    else if (el.insertIndex && el.insertIndex > -1) {
                        RDL.skins.splice(el.insertIndex, 0, el);
                    }
                    else {
                        RDL.skins.push(el);
                    }
                });
            }
            if (countryConfigs.skinsToRemove) {
                countryConfigs.skinsToRemove.forEach(function (el) {
                    var skinIndex = -1;
                    RDL.skins.forEach(function (skn, index) {
                        if (skn.id == el) {
                            skinIndex = index;
                        }
                    });
                    if (skinIndex > -1) {
                        RDL.skins.splice(skinIndex, 1)
                    }
                });
            }
        }
    }
    var getCountryCode = function () {
        var countryCode = "";
        if (RDL.countryDetails && RDL.countryDetails.countryCode) {
            countryCode = RDL.countryDetails.countryCode;
        }
        return countryCode;
    }
    return {
        "modifyCountryWiseLocalization": modifyCountryWiseLocalization,
        "modifyCountryWiseConfig": modifyCountryWiseConfig
    }
}());

function isINTL() {
    var isINTL = isUK() || isFR() || isES() || isIT() || isBR();
    if (isINTL) {
        RDL.prefetchINTLECOMJS = true;
        RDL.useSupplementaryInfoField = true;
        RDL.useDefaultPageSizeA4 = true;
        RDL.enablePageSizeFeature = true;
        RDL.enablemultiParaImprovement = true; //Used for multipara improvement for hover and drag experience
        RDL.localizeDefinitionTips = true;
        RDL.useContentBlobForSVGs = true;
        RDL.showChatIcon = isFR() || isES() || isIT();
        RDL.showCSNumbersInHeader = isBR();
        RDL.usePPDTSection = isIT();
        RDL.useSignatureSection = isIT();
        RDL.useNormalSkinFormatting = true;
        RDL.showDeleteInDragDisableSections = true;
        RDL.enablePrintEmailOnFinalize = true;
        RDL.ecomPrefetchURL = 'https://' + window.location.host + '/payment/scripts/mpintlPrefetchScript.js';
        RDL.showZipPrefix = isES(); // Need this flag on choosetemplate, to prevent removal of zipprefix div in BOLD renderer
        RDL.showAdditionalPersonalInfo = isES();
        RDL.fireTemplateTaggingEvents = true;
        RDL.useCreateDocV1 = true;
        RDL.useEuropeanDateFormat = true;
    }
    return isINTL;
}
function isUK() {
    RDL.isUK = false;
    if (RDL.Portal.portalCd == "muk") {
        RDL.isUK = true;
    }
    return RDL.isUK;
}
function isFR() {
    RDL.isFR = false;
    if (RDL.Portal.portalCd == "mfr") {
        RDL.isFR = true;
    }
    return RDL.isFR;
}
function isES() {
    RDL.isES = false;
    if (RDL.Portal.portalCd == "mes") {
        RDL.isES = true;
    }
    return RDL.isES;
}
function isIT() {
    RDL.isIT = false;
    if (RDL.Portal.portalCd == "mit") {
        RDL.isIT = true;
    }
    return RDL.isIT;
}
function isBR() {
    RDL.isBR = false;
    if (RDL.Portal.portalCd == "mbr") {
        RDL.isBR = true;
    }
    return RDL.isBR;
}
function CommonTrackProperties(islogin) {
    var propertiesToBeSent = {
        'builder type': 'Resume Wizard',
        'Platform': 'Web',
        'Feature Set': 'Resumes',
        'Login Status': islogin ? 'TRUE' : 'FALSE'
    };

    return propertiesToBeSent;
}
function getApiUrl(versionNumber) {
    versionNumber = versionNumber || "v1";
    var configName = "qa";
    var baseUrl = "";
    var apiEnvironment = RDL.environmentURL || environment;
    baseUrl = apiEnvironment != "www" && apiEnvironment != "builder" ? "https://api-@@env-embedded-builder." + RDL.Portal.url + "/api/" + versionNumber + "/" : "https://api-embeddedbuilder." + RDL.Portal.url + "/api/" + versionNumber + "/";
    switch (apiEnvironment) {
        case "reg":
        case "regression":
            configName = "reg";
            BoldAuthCookieName = "BOLDAuth_Reg";
            break;
        case "stg":
            configName = "stg";
            break;
        case "perf":
            configName = "perf";
            break;
        case "local":
        case "qa":
            // showPrintPreviewLinkOnFinalize = true;
            BoldAuthCookieName = "BOLDAuth_QA";
            break;
        case "www":
        case "builder":
            break;
    }
    var returnUrl = baseUrl.replace('@@env', configName);
    if (RDL.Portal.rewriteBuilderApi && !isLocal && !isPerf) {
        returnUrl = window.location.origin + "/eb/api/" + versionNumber + "/";
    }
    return returnUrl;
}

function getJsgUrl(versionNumber) {
    versionNumber = !!versionNumber || "v1";
    let baseUrl = window.location.hostname;
    if (isLocal) {
        baseUrl = baseUrl.replace("local", "qa");
    }

    return "https://" + baseUrl + "/jsg/" + versionNumber + "/";
}

function isIPAD() {
    if (navigator.userAgent.match(/iPad/i))
        return true;
    else
        return false;
}

function isInternetExplorer() {
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf('MSIE ');
    var trident = ua.indexOf('Trident/');
    if (msie > 0 || trident > 0) {
        return true;
    }
    else {
        return false;
    }
}

function startApp(event) {
    if (event != null)
        event.preventDefault();
    RDL.startPageLoader();
    clearInterval(packageLoaded);
    packageLoaded = setInterval(function () {
        var hiwComponent = window.hiwComponent;
        if (hiwComponent && !hiwComponent.preventPageNavigation && configLoaded && resourceLoaded) {
            clearInterval(packageLoaded);
            hideHIWPage();
            hiwComponent.moveToFunnel(event);
        }
    }, 10);
}

function hideHIWPage() {
    if (document.getElementById('howItWorks')) {
        document.getElementById('howItWorks').classList.add("d-none");
    }
}


function hasClass(elem, className) {
    return elem.className && (new RegExp(className, 'g')).test(elem.className);
}

function toggleClass(elem, className) {
    if (hasClass(elem, className)) {
        elem.className = elem.className.replace((new RegExp(className, 'g')), "");
    } else {
        elem.className += " " + className;
    }
}

function getResourceUrl() {
    var portalcd = RDL.Portal.portalCd;
    if ((RDL.Portal.rewriteBlobContent && !isLocal)) {
        return "/blobcontent/" + portalcd + "/";
    } else {
        return (environment != "stg" && environment != "www" && environment != "builder") ? "https://lccontentdev.blob.core.windows.net/" + portalcd + "/" : "https://content.livecareer.com/" + portalcd + "/";
    }


}
function getRWZBlobURL() {
    if ((RDL.Portal.rewriteBlobContent && !isLocal)) {
        return "/blobcontent/rwz/";
    } else {
        return (environment != "stg" && environment != "www" && environment != "builder") ? "https://lccontentdev.blob.core.windows.net/rwz/" : "https://content.livecareer.com/rwz/";
    }
}
function AsyncSegTrack(isLoggedin, visitId) {
    if (RDL.UserConsent) {
        if (typeof analytics != 'undefined') {
            AsyncPageSegTrack(isLoggedin, visitId);
        }
        else {
            var TrackEventsInterval = setInterval(function () {
                if (typeof analytics != 'undefined') {
                    AsyncPageSegTrack(isLoggedin, visitId);
                    clearInterval(TrackEventsInterval);
                }
            }, 100);
        }
    }
}

function AsyncPageSegTrack(isLoggedin, visitId) {
    var userType,
    vsuid = RDL.readCookie("vstrType");
    userType = vsuid == null ? "New" : "Returning";
    if (!vsuid) {
        RDL.createCookie("vstrType", "1", 5 * 365, window.location.host.substr(window.location.host.indexOf('.')));
    }
    var objToSend = { 'Visitor Type': userType, 'Page Type': 'Product' };
    if (visitId) {
        objToSend.visitId = visitId;
    }
    RDL.TrackEvents("page", objToSend, null, isLoggedin);
}

function trackEvent(eventName, eventpropval, userid, islogin) {
    if (RDL.readCookie("mixpanelprops") == null) {
        GetMixpanelProperties();
    }
    else {
        UpdateMixPanelURL();
    }
    TrackEvents(eventName, eventpropval, userid, islogin);
}
function UpdateMixPanelURL() {
    try {
        var mixpanelpropsVal = RDL.readCookie("mixpanelprops");
        var mixPanelValObj = JSON.parse(unescape(mixpanelpropsVal));
        if (mixPanelValObj["$current_url"] != window.location.href) {
            mixPanelValObj["$current_url"] = window.location.href;
            var mixpanelProperties = JSON.stringify(mixPanelValObj);
            RDL.createCookie("mixpanelprops", escape(mixpanelProperties));
        }
    }
    catch (ex) {
        console.log(ex);
     }
}

function GetMixpanelProperties() {
    var mixpanelProperties = '';
    try {
        if (typeof mixpanel != 'undefined' && typeof mixpanel.get_distinct_id != 'undefined') {
            if (isIPAD()) {
                mixpanel.register({ 'device type': 'tablet' });
            } else {
                mixpanel.register({ 'device type': 'desktop' });
            }

            if (!RDL.isLCA && !RDL.isWhiteLabel && !RDL.isZTY) {
                var infoProperties = mixpanel._.info.properties();
                var persistProperties = mixpanel.persistence.properties();
                mixpanelProperties = JSON.stringify(Object.assign(infoProperties, persistProperties));
                RDL.createCookie("mixpanelprops", escape(mixpanelProperties), null, window.location.host.substr(window.location.host.indexOf('.')));
            }
        }
    }
    catch (e) {
        console.log('error in mixpanel properties fetching');
    }
}

function getConfigUrl() {
    var configName = "dev";
    var baseUrl = RDL.Paths.ResourcePath + "config/";
    var _environment = RDL.environmentURL || environment;
    switch (_environment) {
        case "regression":
        case "reg":
            configName = "reg";
            break;
        case "reg-stg":
            configName = "reg-stg";
            break;
        case "stg":
            configName = "stg";
            break;
        case "perf":
            configName = "perf";
            break;
        case "www":
            configName = "prod";
            break;
        case "builder":
            configName = "prod";
            break;
    }
    var filename = configName + ".js";
    if (versionNumber != "1.0.0") {
        filename = filename + "?v=" + versionNumber;
    }
    return baseUrl + filename;
}
function applyCssonCards(cards) {
    for (var i = 0; i < cards.length; i++) {
        cards[i].classList.add("thumb-" + cards[i].parentElement.attributes["data-skincd"].value.toLowerCase());
    }
}
function applyImageCss() {
    var cards = document.getElementsByClassName('list-item-thumb');
    if (RDL.applyCardCss && cards && cards.length > 0) {
        applyCssonCards(cards);
    }
    else {
        setTimeout(function (cards) {
            applyImageCss();
        }, 50);
    }
}

function polyfillNodelistForeach() {
    //polyfill to support foreach on NodeList
    if (window.NodeList && !NodeList.prototype.forEach) {
        NodeList.prototype.forEach = function (callback, thisArg) {
            thisArg = thisArg || window;
            for (var i = 0; i < this.length; i++) {
                callback.call(thisArg, this[i], i, this);
            }
        };
    }
    if (window.DOMTokenList && !DOMTokenList.prototype.forEach) {
        DOMTokenList.prototype.forEach = function (callback, thisArg) {
            thisArg = thisArg || window;
            for (var i = 0; i < this.length; i++) {
                callback.call(thisArg, this[i], i, this);
            }
        };
    }
}

function loadGTM(w, d, s, l, i) {
    w[l] = w[l] || []; w[l].push({
        'gtm.start':
            new Date().getTime(), event: 'gtm.js'
    }); var f = d.getElementsByTagName(s)[0],
        j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src =
            'https://www.googletagmanager.com/gtm.js?id=' + i + dl + (RDL.Portal.googleMapappendGTMQueryStringsKey ? RDL.Portal.googleMapappendGTMQueryStringsKey : ''); f.parentNode.insertBefore(j, f);
}
//End Google Tag Manager

function loadJs(src, async, callback, crossorigin) {
    var s,
        r,
        t;
    r = false;
    s = document.createElement('script');
    s.type = 'text/javascript';
    s.src = src;
    if (crossorigin == true) {
        s.crossOrigin = 'anonymous';
    }
    s.async = (async != null && async != undefined) ? async : true;
    s.onload = s.onreadystatechange = function () {
        if (!r && (!this.readyState || this.readyState == 'complete' || this.readyState == 'loaded')) {
            r = true;
            callback && callback();
        }
    };
    t = document.getElementsByTagName('script')[0];
    t.parentNode.insertBefore(s, t);
}

function loadJsWithKey(src, id, key) {
    var f = document.createElement('script');
    f.setAttribute("src", src);
    f.setAttribute("id", id);
    f.setAttribute("data-app-key", key);
    if (typeof f != "undefined")
        document.getElementsByTagName("head")[0].appendChild(f);
}

function loadStyleSheet(src) {
    if (document.createStyleSheet) document.createStyleSheet(src);
    else {
        var stylesheet = document.createElement('link');
        stylesheet.href = src;
        stylesheet.rel = 'stylesheet';
        stylesheet.type = 'text/css';
        document.getElementsByTagName('head')[0].appendChild(stylesheet);
    }
}

function loadgtms() {
    if (RDL.Portal.gtmKey1 && RDL.Portal.gtmKey1 != null && RDL.Portal.gtmKey1.length > 0) {
        loadGTM(window, document, 'script', 'dataLayer', RDL.Portal.gtmKey1);
    }

    if (RDL.Portal.gtmKey2 && RDL.Portal.gtmKey2 != null && RDL.Portal.gtmKey2.length > 0) {
        loadGTM(window, document, 'script', 'dataLayer', RDL.Portal.gtmKey2);
    }
}

function loadJqueryDepJs() {
    if (RDL.UserConsent) {
        RDL.LoadThirdPartyJS();
    }
    if (typeof (RDL.externalJavascripts) && RDL.externalJavascripts) {
        RDL.externalJavascripts.forEach(function (element) {
            var script = document.createElement('script');
            script.type = "text/javascript";
            script.src = element;
            document.getElementById('afterLoadContent').appendChild(script);
        });
    }
}

function downLoadAccountsJs() {
    if (RDL.Portal && RDL.Portal.useAccountsJs) {
        // create guest user
        var divLoginWidget = document.getElementById('divLoginWidget');
        if (divLoginWidget) {
            divLoginWidget.setAttribute("data-targetDomain", RDL.Paths.AccountsURL);
            divLoginWidget.setAttribute("data-productCode", RDL.PortalSettings.ConfigureProductCd);
            divLoginWidget.setAttribute("data-portalCode", RDL.PortalSettings.ConfigurePortalCd);
        }
        var accountsUrl = RDL.Paths.AccountsURL + "/scripts/app/accounts.min.js";
        (function (d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) return;
            js = d.createElement(s); js.id = id;
            js.src = accountsUrl;
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'accounts-js'));
    }
}

function setCountryDetails(resolve) {
    callAjax(true, RDL.Paths.BaseApiUrl + 'user/countryclaims', "GET", true, true, function (data) {
        var customCountry = RDL.GetQueryString('customcountry') || RDL.readCookie("customcountry");
        if (customCountry) {
            alert('Country selected is ' + customCountry);
            RDL.createCookie("customcountry", customCountry, 1);
        }
        if (data && !customCountry) {
            RDL.countryDetails = JSON.parse(data);
            if (RDL.countryDetails) {
                if (!RDL.countryDetails.continentCode) {
                    RDL.countryDetails.continentCode = ""
                }
                if (!RDL.countryDetails.city) {
                    RDL.countryDetails.city = ""
                }
                if (!RDL.countryDetails.state) {
                    RDL.countryDetails.state = ""
                }
                if (!RDL.countryDetails.zip) {
                    RDL.countryDetails.zip = ""
                }
            }
        }
        else {
            RDL.countryDetails = {
                "countryCode": customCountry || "US",
                "continentCode": "",
                "isEuropianContinent": false,
                "isEEACountry": false,
                "city": customCountry ? "CITY_" + customCountry : "",
                "state": customCountry ? "STATE_" + customCountry : "",
                "zip": customCountry ? "ZIP_" + customCountry : "",
                "ip": ""
            }
        }
        resolve && resolve();
    });
}


function getLocalizationUrl() {
    var resourceName = "dev";
    var baseUrl = RDL.Paths.ResourcePath + "Resources/";
    var _environment = RDL.environmentURL || environment;
    switch (_environment) {
        case "regression":
        case "reg":
            resourceName = "reg";
            break;
        case "reg-stg":
            resourceName = "reg-stg";
            break;
        case "stg":
            resourceName = "stg";
            break;
        case "perf":
            resourceName = "perf";
            break;
        case "www":
            resourceName = "prod";
            break;
        case "builder":
            resourceName = "prod";
            break;
    }

    var filename = resourceName + ".json";
    if (versionNumber != "1.0.0") {
        filename = filename + "?v=" + versionNumber;
    }
    return baseUrl + filename;
}

function handleClaims(result, resolve) {
    RDL.UserClaims = JSON.parse(result);

    if (RDL.UserClaims.user_uid != null && RDL.UserClaims.user_uid != '' && navigator.cookieEnabled) {
        RDL.isloggedIn = (RDL.UserClaims.role != "User") ? false : true;
        if (RDL.isBaseRoute && !isTemplateFlow()) {
            if (RDL.UserClaims.role == "Guest" && isAccUserCalled) {
                PostGuestCreated(RDL.UserClaims.user_uid, 'claim');
            }
        }
        else if (!RDL.isBaseRoute && RDL.UserClaims.role == "Guest" && isAccUserCalled) {
            window.location = RDL.Paths.BasePath;
        }
        else {
            hideHIWPage();
        }
    }
    else if (RDL.Portal && RDL.Portal.useAccountsJs) {
        if (!RDL.UserClaims.user_uid || RDL.readCookie(BoldAuthCookieName) == null) {
            if (isAccUserCalled && (RDL.Portal.useAccountsJs)) {
                clearAndRedirect("/?forceRedirect=claimNotFound")
            } else {
                RDL.CreateGuestUser();
            }
        }
        else {
            PostGuestCreated(RDL.UserClaims.user_uid, 'claim');
        }
    }
    if (resolve) {
        resolve("");
    }
}

function callAjax(logError, url, method, async, withCredentials, callback, resolve, data) {
    var xmlhttp;
    xmlhttp = new XMLHttpRequest();
    xmlhttp.onload = function () {
        if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
            if (callback)
                if (resolve) {
                    callback(xmlhttp.responseText, resolve);
                }
                else {
                    callback(xmlhttp.responseText);
                }
        }
        else {
            if (callback) {
                if (resolve) {
                    callback(null, resolve);
    }
                else {
                    callback(null);
                }
            }
            if (logError) {
                RDL.logMessage = "An error occurred during the Ajax call";
                RDL.logMessage += "\n Referrer : " + document.referrer + "\n- Location : " + window.location.href;
                RDL.logMessage += "\n Status : " + xmlhttp.status + "\n- Request URL : " + xmlhttp.responseURL + "\n- Response Text : " + xmlhttp.responseText;
                var errorObj = {
                    ErrorMessage: 'Ajax call Error Logging-' + RDL.logMessage, LogAsInfo: true
                };
                RDL.LogError(errorObj.ErrorMessage, '', errorObj.LogAsInfo);
            }
        }
    }
    xmlhttp.open(method, url, async);
    if (withCredentials)
        xmlhttp.withCredentials = true;

    if (data) {
        xmlhttp.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
        xmlhttp.send(data);
    }
    else {
        xmlhttp.send();
    }
}

RDL.LogError = function (errorMessage, componentStack, logAsInfo, callback) {
    var mixpanelpropsVal = window.RDL.readCookie("mixpanelprops");
    var mixPanelValObj = JSON.parse(unescape(mixpanelpropsVal));
    var browserName = '';
    var currentUrl = '';
    if (mixPanelValObj) {
        browserName = mixPanelValObj["$browser"];
    }
    currentUrl = window.location.href;
    var errorObj = {
        errorMessage: errorMessage,
        componentStack: componentStack,
        logAsInfo: logAsInfo,
        docId: RDL.readCookie('DocumentID'),
        userID: RDL.UserClaims ? RDL.UserClaims.user_uid : '',
        sourceAppCd: RDL.appCD,
        productCD: RDL.PortalSettings.ConfigureProductCd,
        portalCD: RDL.PortalSettings.ConfigurePortalCd,
        deviceType: 'desktop',
        browser: browserName,
        currentUrl: currentUrl
    }
    callAjax(false, RDL.Paths.BaseApiUrlV2 + 'errors/log', 'POST', true, true, function () {
        RDL.logMessage = "";
        if (callback) {
            callback();
        }
    }, null, JSON.stringify(errorObj));
}

function callAjaxTestBed(url, method, async, withCredentials, callback, resolve, data) {
    var xmlhttp;
    xmlhttp = new XMLHttpRequest();
    xmlhttp.onload = function () {
        if (xmlhttp.readyState == 4 && (xmlhttp.status == 200 || xmlhttp.status == 404)) {
            if (callback)
                if (resolve) {
                    callback(xmlhttp.responseText, resolve);
                }
                else {
                    callback(xmlhttp);
                }
        }
    }
    xmlhttp.open(method, url, async);
    if (withCredentials)
        xmlhttp.withCredentials = true;

    if (data) {
        xmlhttp.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
        xmlhttp.send(data);
    }
    else {
        xmlhttp.send();
    }
}


function getFeatureSet(resolve) {
    var featureUrl = RDL.Paths.BaseApiUrl + 'config/features/' + RDL.Portal.portalCd;
    callAjax(true, featureUrl, "GET", true, false, function (data) {
        if (data) {
            RDL.ArrayFeatureSet = JSON.parse(data).filter(function (x) { return x.moduleName == 'Builder' });
            RDL.ArrayFeatureSet.map(function (feature) { document.documentElement.classList.add('f-' + feature.featureCD.toLowerCase()) });
        }
        if (resolve)
            resolve("");
    });
}

function isFeaturePresent(featureCD) {
    var result = false;
    var feature = RDL.ArrayFeatureSet.filter(function (feature) { return feature.featureCD.toLowerCase() == featureCD.toLowerCase() });
    if (feature && feature.length && feature[0].isActive) {
        //document.documentElement.classList.add('f-' + featureCD.toLowerCase());
        result = true;
    }
    return result;
}

function getTemplatesFromFeedbackSystem() {
    if (RDL.recommendedActions) {
        var studentFeedbakSkinsCode = RDL.recommendedActions.RecommendedFeedbackSkins && RDL.recommendedActions.RecommendedFeedbackSkins.student;
        if (studentFeedbakSkinsCode) {
            var recommendationUrl = RDL.Paths.BaseApiUrl + 'config/recommendedskins/' + RDL.Portal.portalCd + "/" + studentFeedbakSkinsCode;
            callAjax(true, recommendationUrl, "GET", true, false, function (data) {
                if (data) {
                    sessionStorage.setItem(studentFeedbakSkinsCode, data);
                }
            });
        }
    }
}

function loadLocalizedDefinitionTips() {
    if (RDL.Localization && RDL.localizeDefinitionTips) {
        RDL.Definition_Tips.forEach(function (item) {
            item.tips = RDL.Localization[item.tips] ? RDL.Localization[item.tips] : item.tips;
            item.name = RDL.Localization[item.name] ? RDL.Localization[item.name] : item.name;
            item.defaultText = RDL.Localization[item.defaultText] ? RDL.Localization[item.defaultText] : item.defaultText;
            item.title = RDL.Localization[item.title] ? RDL.Localization[item.title] : item.title;
            item.definition = RDL.Localization[item.definition] ? RDL.Localization[item.definition] : item.definition;
            if (item.BulbTipsDefinition)
                item.BulbTipsDefinition = RDL.Localization[item.BulbTipsDefinition] ? RDL.Localization[item.BulbTipsDefinition] : item.BulbTipsDefinition;
            if (item.BulbTips1)
                item.BulbTips1 = RDL.Localization[item.BulbTips1] ? RDL.Localization[item.BulbTips1] : item.BulbTips1;
            if (item.BulbTips2)
                item.BulbTips2 = RDL.Localization[item.BulbTips2] ? RDL.Localization[item.BulbTips2] : item.BulbTips2;
            if (item.BulbTips3)
                item.BulbTips3 = RDL.Localization[item.BulbTips3] ? RDL.Localization[item.BulbTips3] : item.BulbTips3;
            if (item.BulbTips4)
                item.BulbTips4 = RDL.Localization[item.BulbTips4] ? RDL.Localization[item.BulbTips4] : item.BulbTips4;

        });
    }
}
function polyfillArrayFrom() {
    if (Array.from) {
        return;
    }
    Array.from = (function () {
        var toStr = Object.prototype.toString;
        var isCallable = function (fn) {
            return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
        };
        var toInteger = function (value) {
            var number = Number(value);
            if (isNaN(number)) { return 0; }
            if (number === 0 || !isFinite(number)) { return number; }
            return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
        };
        var maxSafeInteger = Math.pow(2, 53) - 1;
        var toLength = function (value) {
            var len = toInteger(value);
            return Math.min(Math.max(len, 0), maxSafeInteger);
        };

        return function from(arrayLike/*, mapFn, thisArg */) {
            var C = this;

            var items = Object(arrayLike);

            if (arrayLike == null) {
                throw new TypeError('Array.from requires an array-like object - not null or undefined');
            }

            var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
            var T;
            if (typeof mapFn !== 'undefined') {
                if (!isCallable(mapFn)) {
                    throw new TypeError('Array.from: when provided, the second argument must be a function');
                }

                if (arguments.length > 2) {
                    T = arguments[2];
                }
            }

            var len = toLength(items.length);

            var A = isCallable(C) ? Object(new C(len)) : new Array(len);

            var k = 0;
            var kValue;
            while (k < len) {
                kValue = items[k];
                if (mapFn) {
                    A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
                } else {
                    A[k] = kValue;
                }
                k += 1;
            }
            A.length = len;
            return A;
        };
    }());

}

function handleAliasAndIdentify() {
    if (!RDL.isloggedIn) {
        var interval = setInterval(function () {
            if (typeof analytics != 'undefined') {
                clearInterval(interval);
                analytics.alias(RDL.UserClaims.user_uid);
                setTimeout(function () {
                    analytics.identify(RDL.UserClaims.user_uid, null);
                }, 100);
            }
        }, 50);
    }
}

function getLongMonths(culture) {
    var monthsLong = [""];
    for (var i = 0; i < 12; i++) {
        var objDate = new Date(); objDate.setMonth(i);
        var locale = culture.toLowerCase(), month = objDate.toLocaleString(locale, { month: "long" });
        monthsLong.push(month.substr(0, 1).toUpperCase() + month.substr(1, month.length - 1));
    }
    return monthsLong;
}

function addExperimentsLocalizedText() {
    var expsList = Object.keys(RDL.portalExperiments);
    if (expsList.length > 0) {
        expsList.forEach(function (exp) {
            var experimentID = RDL.portalExperiments[exp].id;
            if (RDL.ExperimentsLocalization[experimentID]) {
                Object.assign(RDL.Localization, RDL.ExperimentsLocalization[experimentID]);
            }
        });
    }
    if (RDL.featurePhoto) {
        var photoLocalization = {
            "uploaded_Text": "Uploaded",
            "dontAddPhoto_Text": "Make sure to check the application requirements before adding a photo. Some employers won’t consider resume with photos.",
            "wantAddPhoto_Text": "Want to add a photo?",
            "chooseRecentPhoto_Text": "Choose a recent color photo in a JPEG, PNG, or GIF format, that’s less than 10MB.",
            "editYourPhoto_Text": "Crop your photo so it only shows your head and shoulders.",
            "replaceAlreadyUploaded_Text": "If you already uploaded a photo, uploading another will replace it.",
            "resumePhoto_Text": "Save",
            "photoUpload_Label": "Photo upload",
            "choosePhoto_Text": "Change photo",
        }
        Object.assign(RDL.Localization, photoLocalization);
        RDL.localizationResumeRenderer["editPhoto_Text"] = "Edit";
    }
    if (RDL.sam2V1Exp) {
        Object.assign(RDL.Localization, {
            "sam2_student_jobtitle_tip_heading": "Student is not usually used as a job title",
            "sam2_none_jobtitle_tip_heading": "{0} does not look like a job title",
            "sam2_student_jobtitle_tip_subheading": "Here are popular job titles for students:",
            "sam2_none_jobtitle_tip_subheading": "Try a popular job title instead:",
            "sam2_student_jobtitle_suggestions": "Volunteer,Tutor,Babysitter,Dogwalker,Teaching Assistant,Office Helper,Work Study,Data Entry Clerk",
            "sam2_none_jobtitle_suggestions": "Volunteer, Babysitter, Intern, Tutor, Lifeguard, Delivery Driver, Cleaner, Camp Councelor, Yard Worker, Community Service Volunteer"
        });
    }
}

function handleLocalizationText(result, resolve, configObj) {
    var data = JSON.parse(result);
    RDL.Localization = data.localizedtext;
    configuration.modifyCountryWiseLocalization(data, configObj);
    RDL.localizedDocumentText = data.localizedtext.resumeNameLocalizedText ? data.localizedtext.resumeNameLocalizedText : "Resume";
    if (!RDL.showProfessionField) {
        RDL.Localization.default_preview_documentTitle = "";
    }

    RDL.localizationResumeRenderer = {
        "zip_Label": RDL.Localization.zip_Label || "",
        "firstNamDefaultText": RDL.Localization.default_preview_firstname,
        "lastNameDefaultText": RDL.Localization.default_preview_lastname,
        "fNameDefaultText": RDL.Localization.default_firstname,
        "lNameDefaultText": RDL.Localization.default_lastname,
        "professionDefaultText": RDL.Localization.default_preview_documentTitle,
        "streetAddressDefaultText": RDL.Localization.default_preview_street,
        "cityDefaultText": RDL.Localization.default_preview_city,
        "stateDefaultText": RDL.Localization.default_preview_state,
        "zipDefaultText": RDL.Localization.default_preview_zipcode,
        "neighbourhoodDefaultText": RDL.Localization.default_preview_neighbourhood,
        "emailDefaultText": RDL.Localization.default_preview_email,
        "phoneDefaultText": RDL.Localization.default_preview_phone,
        "cellPhoneDefaultText": RDL.Localization.cPhone || '',
        "hPhoneText": RDL.Localization.hPhoneText || '',
        "cPhoneText": RDL.Localization.cPhoneText || '',
        "resumeTitleDefaultText": RDL.Localization.rsTitlDef,
        "exRsmTitleDef": RDL.Localization.exRsTitlDef,
        "exRsmTitleDef2": RDL.Localization.exRsTitl2Def,
        "exRsmTitleDef3": RDL.Localization.exRsTitl3Def,
        "editSectionText": (RDL.Localization.editSection || ''),
        "dragText": RDL.Localization.move_Text,
        "deleteText": RDL.Localization.delete_Label,
        "editText": RDL.Localization.edit_Label,
        "addSubSectionText": "",
        "addNewSecDocText": RDL.Localization.addNewSecDoc,
        "finalRename": RDL.Localization.rename_Label,
        "finalRenameErr": RDL.Localization.enterValidDate_Text,
        "finalRenameCancel": RDL.Localization.cancel_Label,
        "suppInfoDefaultText": RDL.Localization.suppInfo,
        "editPhoto_Text": RDL.Localization.EditPhoto_Text,
        "currentText": RDL.Localization.current_Text,
        "oldCurrentText": RDL.Localization.oldCurrent_Text,
        "shortMonths": RDL.Localization.shortMonth,
        "longMonths": getLongMonths(RDL.cultureCD || "en-us"),

        "schoolnameDefaultText": RDL.Localization.default_preview_schoolname,
        "schoollocationDefaultText": RDL.Localization.default_preview_schoollocation,
        "schoolcityDefaultText": RDL.Localization.default_preview_schoolcity,
        "schoolstateDefaultText": RDL.Localization.default_preview_schoolstate,
        "degreeearnedDefaultText": RDL.Localization.default_preview_degreeearned,
        "graduationyearDefaultText": RDL.Localization.default_preview_graduationyear,
        "fieldofexpertiseDefaultText": RDL.Localization.default_preview_fieldofexpertise,

        "jobtitleDefaultText": RDL.Localization.default_preview_jobtitle1,
        "companyNameDefaultText": RDL.Localization.default_preview_company1,
        "jobcityDefaultText": RDL.Localization.default_preview_jobcity1,
        "jobstateDefaultText": RDL.Localization.default_preview_jobstate1,
        "jobStarteDateDefaultText": RDL.Localization.default_preview_jobstartdate1,
        "jobEndDateDefaultText": RDL.Localization.default_preview_jobenddate1,
        "jobDescriptionDefaultText": RDL.Localization.default_preview_jobdescription1,

        "jobtitleDefaultText2": RDL.Localization.default_preview_jobtitle2,
        "companyNameDefaultText2": RDL.Localization.default_preview_company2,
        "jobcityDefaultText2": RDL.Localization.default_preview_jobcity2,
        "jobstateDefaultText2": RDL.Localization.default_preview_jobstate2,
        "jobStarteDateDefaultText2": RDL.Localization.default_preview_jobstartdate2,
        "jobEndDateDefaultText2": RDL.Localization.default_preview_jobenddate2,
        "jobDescriptionDefaultText2": RDL.Localization.default_preview_jobdescription2,

        "jobtitleDefaultText3": RDL.Localization.default_preview_jobtitle3,
        "companyNameDefaultText3": RDL.Localization.default_preview_company3,
        "jobcityDefaultText3": RDL.Localization.default_preview_jobcity3,
        "jobstateDefaultText3": RDL.Localization.default_preview_jobstate3,
        "jobStarteDateDefaultText3": RDL.Localization.default_preview_jobstartdate3,
        "jobEndDateDefaultText3": RDL.Localization.default_preview_jobenddate3,
        "jobDescriptionDefaultText3": RDL.Localization.default_preview_jobdescription3,

        "summaryDefaultText": RDL.Localization.default_preview_summary,

        "skillDef": RDL.Localization.default_preview_skill1,
        "skillDef2": RDL.Localization.default_preview_skill2,
        "skillDef3": RDL.Localization.default_preview_skill3,
        "DOB_Text": RDL.Localization.DOB_finalize_Text,
        "nationality_Text": RDL.Localization.nationality_finalize_Text,
        "toDate_text": RDL.Localization.toDate_text || '',
        "address_Label": RDL.Localization.address_Label || '',
        "email_Label": RDL.Localization.email_Label || '',
        "phone_Label": RDL.Localization.phone_Label || '',
        "maritalStatus_Text": RDL.Localization.maritalStatus_finalize_Text
    }

    if (!RDL.localizeDefinitionTips) {
        RDL.Localization.flgEnabledSplit = false;
        RDL.Localization.degreeRWZ = [
            { name: "DGRE", value: "-2", label: "Enter a different degree" },
            { name: "DGRE", value: "Some College (No Degree)", label: "Some College (No Degree)" }

        ];

        RDL.Definition_Tips = [
            {
                "tips": "",
                "sectionTypeCd": "NAME",
                "name": RDL.Localization.nameName_SecType_db,
                "defaultText": "",
                "title": "",
                "definition": "",
                "doczonetypecd": "HEAD",
                "isDefaut": true
            }, {
                "tips": "",
                "sectionTypeCd": "CNTC",
                "name": RDL.Localization.cntcCntc_SecType_db,
                "defaultText": "",
                "title": "",
                "definition": "",
                "doczonetypecd": "HEAD",
                "isDefaut": true
            }, {
                "tips": "<li>" + RDL.Localization.needToknow_Text + "</li><li>" + RDL.Localization.summTips_ShowEmp_Text + "</li><li>" + RDL.Localization.summTips_Help_Text + "</li>",
                "sectionTypeCd": "SUMM",
                "name": RDL.Localization.professionalSummary_Text,
                "defaultText": RDL.Localization.placeholder_Summary,
                "title": "",
                "definition": "An overview of your career stating your most important strengths and abilities. This section provides a clear snapshot of who you are, what you can offer, and what you are looking to accomplish.",
                "doczonetypecd": "BODY",
                "isDefaut": true,
                "BulbTipsDefinition": RDL.Localization.shortCut_Text,
                "BulbTips1": RDL.Localization.careerOverView_Text,
                "BulbTips2": RDL.Localization.chooseExample_Text,
                "BulbTips3": RDL.Localization.summary_Text,
                "PageTitle": RDL.Localization.summary_Tips_lbl
            }, {
                "tips": "<li>" + RDL.Localization.needToknow_Text + "</li><li>" + RDL.Localization.skillTips_Scan_Text + "<li>" + RDL.Localization.skillTips_Help_Text + "</li>",
                "sectionTypeCd": "HILT",
                "name": RDL.Localization.skills_Label,
                "defaultText": RDL.Localization.placeholder_Skills_single,
                "title": "",
                "definition": "In this 2-column section, use bullets to highlight your top 4-8 skills. We recommend listing skills in short, 2-3 word phrases, without punctuation.",
                "doczonetypecd": "BODY",
                "isDefaut": true,
                "BulbTipsDefinition": RDL.Localization.managerInsightSkills_Text,
                "BulbTips1": RDL.Localization.relevantSkills_Text,
                "BulbTips2": RDL.Localization.dontHaveExperience_Text,
                "BulbTips3": RDL.Localization.bulletPhrases_Text,
                "BulbTips4": RDL.Localization.notSureAboutSkill_Text,
                "PageTitle": RDL.Localization.skill_Tips_lbl
            }, {
                "tips": "<li>" + RDL.Localization.needToknow_Text + "</li><li>" + RDL.Localization.expTips_ScanRsm_Text + "</li><li>" + RDL.Localization.expTips_BulletPointsImp_Text + "</li>",
                "sectionTypeCd": "EXPR",
                "name": RDL.Localization.wrkhWrkh_SecType_db,
                "defaultText": RDL.Localization.placeholder_Experience_enlargePreview,
                "definition": "Outline up to 10 years of recent work experience, beginning with your current employer. Use bullets to list your major efforts, accomplishments and experience. If you have relevant work experience from more than 10 years ago, we recommend adding a separate section called Previous Work History.",
                "title": "",
                "doczonetypecd": "BODY",
                "isDefaut": true,
                "BulbTipsDefinition": RDL.Localization.hiringManagers_Text,
                "BulbTips1": RDL.Localization.enterInfo_Text,
                "BulbTips2": RDL.Localization.useFullTitle_Textz,
                "BulbTips3": RDL.Localization.includeDate_Text,
                "BulbTips4": RDL.Localization.canRemember_Text,
                "PageTitle": RDL.Localization.mbe_WorkHistoryTips_Tips_lbl
            }, {
                "tips": "<li>" + RDL.Localization.needToknow_Text + "</li><li>" + RDL.Localization.eduTips_Scan_Text + "</li><li>" + RDL.Localization.eduTips_FormatCare_Text + "</li>",
                "sectionTypeCd": "EDUC",
                "name": RDL.Localization.education_Label,
                "defaultText": "",
                "title": "",
                "definition": "Any degrees, coursework, professional development or training programs you have completed in preparation for your target job.",
                "doczonetypecd": "BODY",
                "isDefaut": true,
                "BulbTipsDefinition": RDL.Localization.ageism_Text,
                "BulbTips1": RDL.Localization.mbe_EducationTips_ListSchools_lbl,
                "BulbTips2": RDL.Localization.listSchool_Text,
                "BulbTips3": RDL.Localization.cources_Text,
                "BulbTips4": RDL.Localization.seperateSection_Text,
                "PageTitle": RDL.Localization.mbe_EducationTips_Tips_lbl
            }, {
                "tips": "",
                "title": "",
                "sectionTypeCd": "AFIL",
                "definition": "",
                "name": RDL.Localization.affil_Text,
                "defaultText": RDL.Localization.placeHolderText_affi,
                "doczonetypecd": "BODY",
                "isDefaut": false
            }, {
                "tips": "",
                "title": "",
                "sectionTypeCd": "ACCM",
                "definition": "",
                "name": RDL.Localization.accomplishments_Label,
                "defaultText": RDL.Localization.placeHolderText_accm,
                "doczonetypecd": "BODY",
                "isDefaut": false
            }, {
                "tips": "",
                "title": "",
                "sectionTypeCd": "ADDI",
                "definition": "",
                "name": RDL.Localization.addInfo_Text,
                "defaultText": RDL.Localization.placeHolderText_addi,
                "doczonetypecd": "BODY",
                "isDefaut": false
            }, {
                "tips": "",
                "title": "",
                "sectionTypeCd": "LANG",
                "definition": "",
                "name": RDL.Localization.lang_Text,
                "defaultText": RDL.Localization.placeHolderText_lang,
                "doczonetypecd": "BODY",
                "isDefaut": false
            }, {
                "tips": "",
                "title": "",
                "sectionTypeCd": "SFTR",
                "definition": "",
                "name": RDL.Localization.sftr_Text,
                "defaultText": RDL.Localization.placeHolderText_sftr,
                "doczonetypecd": "BODY",
                "isDefaut": false
            }, {
                "tips": "",
                "title": "",
                "sectionTypeCd": "INTR",
                "definition": "",
                "name": RDL.Localization.intr_Text,
                "defaultText": RDL.Localization.placeHolderText_intr,
                "doczonetypecd": "BODY",
                "isDefaut": false
            }, {
                "tips": "",
                "title": "",
                "sectionTypeCd": "CERT",
                "definition": "",
                "name": RDL.Localization.cert_Text,
                "defaultText": RDL.Localization.placeHolderText_cert,
                "doczonetypecd": "BODY",
                "isDefaut": false
            }, {
                "tips": "",
                "title": "",
                "sectionTypeCd": "ALNK",
                "definition": "",
                "name": RDL.Localization.websitePortfolios_Text,
                "defaultText": "",
                "doczonetypecd": "BODY",
                "isDefaut": false
            }, {
                "tips": "",
                "title": "",
                "sectionTypeCd": "CUST",
                "definition": "",
                "name": "",
                "defaultText": RDL.Localization.placeHolderText_addi,
                "doczonetypecd": "BODY",
                "isDefaut": false
            },
            {
                "tips": "",
                "title": "",
                "sectionTypeCd": "LNGG",
                "definition": "",
                "name": RDL.Localization.languagesTitle,
                "defaultText": "",
                "doczonetypecd": "BODY",
                "isDefaut": false
            }
        ];
    }
    setPortalSkin();
    resourceLoaded = true;
    if (resolve)
        resolve(data);
}

function handlePostPageLoad() {
    isHandlePostPageLoadCalled = true;
    if (RDL.htmlSkinRendering) {
        if (RDL.isZtyCss) {
            loadStyleSheet(RDL.Paths.ResourcePath + 'styles/zty-skins-styles.css');
        }
        else {
            if (isLocal) {
                loadStyleSheet('/lc-mpr-skins-styles.css');
            } else {
                loadStyleSheet(RDL.Paths.RWZBlobUrl + 'core/css/lc-mpr-skins-styles.min.css');
            }
        }
    }
    //Load for freshchat portals only
    if (RDL.enableFreshChat == "true") {
        loadJs("https://wchat.freshchat.com/js/widget.js");
        loadJs("https://snippets.freshchat.com/js/fc-pre-chat-form-v2.js");
        loadJs(frehchatJsUrl);
    }

    //Ecom Prefecth for INTL
    if (RDL.prefetchINTLECOMJS) {
        loadJs(RDL.ecomPrefetchURL);
    }

    if (!reqAccountsGuestUserCreation) {
        try {
            (function (d, s, id) {
                var js, fjs = d.getElementsByTagName(s)[0];
                if (d.getElementById(id)) return;
                js = d.createElement(s); js.id = id;
                js.src = RDL.VisitorApiSetting.JSURL;
                fjs.parentNode.insertBefore(js, fjs);
            }(document, 'script', 'visitor-jssdk'));
        }
        catch (e) {
            console.log(e);
        }
    }

    if (RDL.enableImpactRadiusLogging) {
        //log browser DNT requests
        if (checkDoNotTrackSetting()) {
            RDL.LogError('Impact Radius Analysis Logging- do not track browser setting is enabled-desktop', '', true);
        }
        else if (RDL.GetQueryString('utm_source') && RDL.GetQueryString('utm_source').toLowerCase().indexOf('impact-radius') > -1) {
            RDL.LogError('Impact Radius Analysis Logging- impact radius utm-desktop', '', true);
        }
    }

    var isGuestUser = (RDL.UserClaims == null) ? true : (RDL.UserClaims != null && RDL.UserClaims.role == "Guest" ? true : false);
    if ((RDL.isBaseRoute && RDL.GetQueryString('mode') != 'new' && RDL.GetQueryString('welcomeback') != 1
        && RDL.GetQueryString('skin') == null && RDL.GetQueryString('docid') == null && isGuestUser) || RDL.chooseTemplateLP01Test) {
        triggerHIWStage = true;
    }
    else {
        RDL.startPageLoader();
    }
    if (RDL.isRefresh) {
        if (window.isNewOnboarding) {
            loadImageFiles();
        }
        RDL.isloggedIn = false;
        if (RDL.UserClaims) {
            if (RDL.UserClaims.role == "User") {
                RDL.isloggedIn = true;
            }
            handleAliasAndIdentify();
        }
        var visitId = RDL.readCookie("vsuid");
        AsyncSegTrack(RDL.isloggedIn, visitId);
        if (RDL.isBaseRoute) {
            RDL.TrackEvents('enter builder', {}, '', RDL.isloggedIn);
        }
        if (isGuestUser && RDL.isBaseRoute) {
            if (!isAffiliateTraffic()) {
                RDL.BuilderUsageTrackEvents('viewed', 'create my resume', null, RDL.isloggedIn, null);
            }
        }
        if (!RDL.isLCA && !RDL.isWhiteLabel && !RDL.isZTY) {
            loadJs(platFormJsUrl, true);
        }
    }

    !RDL.chooseTemplateLP01Test && !RDL.loadSvgImages && RDL.loadSvgs();
    !RDL.chooseTemplateLP01Test && !RDL.loadHtmlFile && RDL.loadFile();
    var bodyDom = document.getElementsByTagName('body')[0];
    if (bodyDom.classList.contains('no-scroll')) {
        bodyDom.classList.remove('no-scroll')
    }
    var theme = RDL.GetQueryString('theme') ? unescape(RDL.GetQueryString('theme')) : null;
    if (theme) {
        RDL.SkinThemeFromPortal = theme.toLowerCase();
    }

    loadJs("https://www.google.com/recaptcha/api.js?render=explicit", true);
    loadJs("https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js", true, loadJqueryDepJs);
    //loadJs(RDL.Paths.ResourcePath + "scripts/es6/es6-shim.min.js", true, polyfillArrayFrom, true);
    loadJs(RDL.Paths.RWZBlobUrl + "common/js/es6-shim.min.js", true, polyfillArrayFrom, true);
    loadStyleSheet(RDL.Paths.ResourcePath + "styles/font-awesome-5/css/fontawesome5.min.css");
    if(isIT()){
        loadStyleSheet("https://fonts.googleapis.com/css?family=Allura|Dancing+Script|Dynalight|Mrs+Saint+Delafield&display=swap");
    } else if (RDL.isMPR) {
        loadStyleSheet("https://fonts.googleapis.com/css?family=Montserrat:400|Roboto:400,500|Roboto+Slab:300,400,700|Source+Sans+Pro:200,300,400,600,700,900&display=swap");
    }
    applyImageCss();
    polyfillNodelistForeach();


    if (isFeaturePresent('DRPBOX')) {
        setUpGoogleUploadDropBox();
    }

    if (RDL.isloggedIn) {
        RDL.UpdatePushnami();
    }

    if (RDL.clientEventsUrl) {
        (function () {
            loadJs(RDL.clientEventsUrl + "/scripts/boldEventStream.min.js?v=2.0.0", true, function () {
                if (window.BoldEventStream) {
                    var configObj = BoldEventStream.ClassInitializers.getNewConfigurationObject();
                    configObj.AjaxDetails.eventsPostEndpointUrl = RDL.clientEventsUrl + '/' + configObj.AjaxDetails.eventsPostEndpointUrl;
                    BoldEventStream.initializeAsync(window, configObj)
                        .then(function () {
                            loadJs(RDL.clientEventsUrl + "/scripts/boldPagePerf.min.js?v=1.0.0", true, function () {
                                PerfUtil.initializeAsync(BoldEventStream);
                            });
                        })
                }
            });
        })();
    }
}
function setExperimentLocalizationObject() {
    RDL.ExperimentsLocalization = {};
    if (RDL.portalExperiments.mprJobAlerts) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.mprJobAlerts.id] = {
            "job_alert_success_message": "You created a job alert.",
            "job_alert_toggle_text": "Turn on job alert for {0} at {1}"
        }
    }    
    if (RDL.portalExperiments.mpukCovid19Test) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.mpukCovid19Test.id] = {
            "createAccountSell_Text": "Create an account so you can save your CV. We won’t sell or share your details with anyone.",
            "quickest_easiest_Text": "The quickest, easiest way to build a CV and get hired."
        };
    }

    if (RDL.portalExperiments.lcExpandedStudentFlow) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.lcExpandedStudentFlow.id] = {
            "what_certificate_degree_pursuing": "What kind of certificate or degree are you pursuing?",
            "enter_different_degree": "Enter a different degree (e.g. PHD)",
            "please_make_selection": "Please make a selection"
        };
    }

    if (RDL.portalExperiments.mprContactOptimize) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.mprContactOptimize.id] = {
            "cntcEmailHelpText": "We need your email address to save your resume.",
            "cntcAddPhoneAddressBtnText": "Add phone number or address",
            "cntcSectionHeaderTitle": "What’s your name and email address?",
            "cntcSectionHeaderSubTitle": "You can add your phone number and address too."
        };
    }

    if (RDL.portalExperiments.mpukRegisterPageDataPrivacySection) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.mpukRegisterPageDataPrivacySection.id] = {
            "norton_privacy_title": "We’re serious about</br><b>protecting your privacy</b>",
            "norton_privacy_bullet1": "Your privacy is our #1 priority.",
            "norton_privacy_bullet2": "All your personal data is secure</br> and SSL encrypted.",
            "norton_privacy_bullet3": "We’ll never share your personal</br> data without your consent.",
            "norton_privacy_bullet4": "We’re constantly updating our </br>security to continue to keep </br> your data safe.",
            "norton_review_policy": "Review our privacy policy"
        };
    }
    if (!RDL.portalExperiments.lcSkillRecommendation && RDL.portalExperiments.mprSkillRecommendation) {
        RDL.portalExperiments.lcSkillRecommendation = RDL.portalExperiments.mprSkillRecommendation;//Temp assignment as experiment is same.
    }
    if (RDL.portalExperiments.lcSkillRecommendation) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.lcSkillRecommendation.id] = {
            "Skill_Recommendation_Heading": "What job is this resume for?",
            "Skill_Recommendation_Sub_Heading": "We'll show you what skills the employer wants. Enter another job title to see the top skills for it.",
            "Skill_Recommendation_Sub_Heading_v2":"We'll show you what skills the employer wants.",
            "Skill_Recommendation_Top_4_Skills": "Here are the top 4 skills for a ",
            "Skill_Recommendation_Type_JobTitle": "Search for your desired job title to view results...",
            "Skill_Recommendation_Desired_JobTitle": "Desired Job Title",
            "Skill_Recommendation_Add_Selected_Skills": "Add Selected Skills",
        };
    }
    if (RDL.portalExperiments.lcJTAutosuggestUpdate) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.lcJTAutosuggestUpdate.id] = {
            "Suggested_Titles": "Suggested Titles",
        };
    }
    if (RDL.BeatTheBotExpr || RDL.portalExperiments.lcBeatTheBotExpr) {
        RDL.BeatTheBotExprLocalization = {
            "check_your_resumes_text": "Instantly check your resume for issues and customize it for the job you want.",
            "continue_arrow_text": "Continue"
        }
    }

    if (RDL.portalExperiments.mprDesktopUICleanUP) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.mprDesktopUICleanUP.id] = {
            "show_All_lbl": "Show all",
            "helpText_lbl": "Include internships, unpaid jobs, and volunteer work."
        };
    }
    if (RDL.portalExperiments.SAM2) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.SAM2.id] = {
            "SAM2_choose_industry": "Choose an industry",
            "SAM2_search_industry": "Search Industry",
            "SAM2_choose_industry_subtitle": "Your industry helps us give you better advice. It won't be on your resume.",
            "SAM2_choose_responsibilities_select": "Choose responsibilities",
            "SAM2_relelated_titles": "Search related titles to see more pre-written examples",
            "SAM2_see_more": "See more",
            "SAM2_what_are_responsibility": "What kind of responsibilities did you have?",
            "SAM2_experience_industry_heading": "What industry was the ### position in?",
            "SAM2_experience_industry_sub_heading": "This helps us recommend content for your resume. The industry won’t be on your resume.",
            "SAM2_ttc_sub_heading": "Use the pre-written examples below to get started.",
            "SAM2_industry": "Industry",
            "SAM2_responsibilities": "Responsibilities",
            "SAM2_return_to": "Return to ",
            "SAM2_return_to_in": " in "
        };
    }

    if (RDL.portalExperiments.mprFinalizePageOptimization) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.mprFinalizePageOptimization.id] = {
            "default_label": "Default",
            "modern_txt": "Modern",
            "traditional_txt": "Traditional",
            "creative_txt": "Creative",
            "all_txt": "All",
            "done_txt": "Done",
            "format_txt": "Formatting",
            "medium_lbl": "Medium"
        };
    }
    if (RDL.portalExperiments.mpintlUpdatedTTCFlowTest) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.mpintlUpdatedTTCFlowTest.id] = {
            "updatedTTC_step1_Header": "Créez un CV facilement grâce à notre contenu pré-rédigé par nos experts.",
            "updatedTTC_step1_SubHeader": "Commençons par remplir la section Compétences.",
            "updatedTTC_step2_Header": "Indiquez un intitulé de poste",
            "updatedTTC_step2_JTPlaceholder_Text": "Vendeuse",
            "updatedTTC_step2_JTSearch_Label": "Recherchez des compétences par intitulé de poste",
            "updatedTTC_step2_ToolTip1": "Conseil : ajoutez votre intitulé de poste le plus récent et découvrez les compétences correspondantes",
            "updatedTTC_step2_ToolTip2": "Conseil : ajoutez votre dernier intitulé de poste ou essayez avec l'intitulé \"#{0}#\" pour voir nos recommendations.",
            "updatedTTC_step2_defaultJobtitle": "Vendeuse",
            "updatedTTC_step3_Header": "Choisissez les compétences que vous souhaitez ajouter à votre CV",
            "updatedTTC_step3_ToolTip": "Conseil : il est recommandé d'ajouter 6 à 8 compétences. Vous pourrez les personnaliser dès la prochaine page.",
            "updatedTTC_step4_Header": "Utilisez l'espace ci-dessous pour modifier ou ajouter vos propres compétences.",
            "updatedTTC_step4_ToolTip": "Conseil : cliquez ici pour modifier vos compétences. Vous pourrez effectuer des modifications à tout moment.",
            "updatedTTC_step5_Header": "Vous venez de terminer la section Compétences !",
            "updatedTTC_step5_SubHeader": "Utilisez désormais notre contenu pré-rédigé et nos conseils afin de compléter chaque section de votre CV.",
            "updatedTTC_CNTC_Header": "Remplissez vos coordonnées avant de continuer",
            "updatedTTC_CNTC_SubHeader": "Il est recommandé d'indiquer au moins une adresse e-mail et un numéro de téléphone."
        };
    }

    if (RDL.portalExperiments.mprFeatureGate1) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.mprFeatureGate1.id] = {
            "basic": "Basic",
            "basic_tip": "Gives you access to 4 <b>Basic</b> templates and limited support while building your resume.",
            "premium": "Premium",
            "premium_tip": "<b>Premium</b> gives you access to 30+ templates that will get you noticed by employers. Plus unlimited resume building support."
        }
    }

    if (RDL.portalExperiments.mprAustraliaLocalization) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.mprAustraliaLocalization.id] = {
            "au_default_first_name": "Olivia",
            "au_default_last_name": "Smith",

            "au_default_phone": "(02) 9876 5323",
            "au_default_city": "Sydney",
            "au_default_state": "NSW",
            "au_default_zip": "2000",
            "au_default_email": "rachael@samplemail.com",

            "au_default_summary": "Motivated Customer Service Representative committed to providing high-quality service for superior guest experiences. Positive, infectious personality with excellent interpersonal and relationship-building skills, improving customer satisfaction and loyalty.",
            "au_default_skill1": "<ul><li>CRM proficient</li><li>Excellent customer care</li><li>Methodical multitasking</li></ul>",
            "au_default_skill2": "<ul><li>Outstanding verbal and written communication</li><li>Complaint resolution</li><li>Strategic sales knowledge</li></ul>",
            "au_default_skill3": "<ul><li>Relationship-building</li><li>Extremely organised</li><li>Sales expertise</li></ul>",

            "au_default_job_title": "Customer Service Representative",
            "au_default_job_city": "Sydney",
            "au_default_job_state": "NSW",
            "au_default_company_name": "Sydney Coffee Wholesalers",
            "au_default_job_start_date": "01/2018",
            "au_default_job_description": "<ul><li>Ranked as most effective in CSR out of 20 representatives.</li><li>Developed and implemented a rewards programme to give back to the community, effectively donating $5000 annually.</li><li>Created four new processes and systems for increasing customer service satisfaction.</li><li>Improved retention by 20% through new product suggestions to customers requesting service cancellations.</li></ul>",

            "au_default_job_title2": "Receptionist",
            "au_default_company_name2": "Ace Medical Practice",
            "au_default_job_city2": "Sydney",
            "au_default_job_state2": "NSW",
            "au_default_job_start_date2": "01/2016",
            "au_default_job_end_date2": "01/2018",
            "au_default_job_description2": "<ul><li>Welcomed approximately 50 patients per day with warmth and kindness, ensuring smooth booking and checking in processes.</li><li> Prepared, compiled and filed upwards of 65 documents each day.</li> <li>Kept reception area clean and neat to give visitors a positive first impression of the practice.</li><li>Monitored premises security, screened visitors, updated logs and issued passes.</li></ul> ",


            "au_default_school_name": "New England Institute",
            "au_default_school_city": "Port Macquarie",
            "au_default_school_state": "NSW",
            "au_default_graduation_year": "2016",
            "au_default_preview_fieldofexpertise": "Creative Practice",
            "au_default_preview_degreeearned": "BA",

            "au_schoolName_Text": "School or University Name",
            "au_schoolLoc_Text": "School or University Location",
            "au_next_finalize_btn_Label": "NEXT: FINALISE",
            "au_finalize_Label": "FINALISE",
            "au_summTips_Help_Text": "We’ll help you write a great one with expert content you can customise.",

            "documentTitle_Label": "Experienced Sales Associate",
            "documentTitleLabelText": "Professional Title"
        };
    }
    if (RDL.portalExperiments.mprAustraliaLocalizationv2) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.mprAustraliaLocalizationv2.id] = {
            "au_default_first_name": "Olivia",
            "au_default_last_name": "Smith",

            "au_default_phone": "(02) 9876 5323",
            "au_default_city": "Sydney",
            "au_default_state": "NSW",
            "au_default_zip": "2000",
            "au_default_email": "osmith@samplemail.com",

            "au_default_summary": "Motivated Customer Service Representative committed to providing high-quality service for superior guest experiences. Positive, infectious personality with excellent interpersonal and relationship-building skills, improving customer satisfaction and loyalty.",
            "au_default_skill1": "<ul><li>CRM proficient</li><li>Excellent customer care</li><li>Methodical multitasking</li></ul>",
            "au_default_skill2": "<ul><li>Outstanding verbal and written communication</li><li>Complaint resolution</li><li>Strategic sales knowledge</li></ul>",
            "au_default_skill3": "<ul><li>Relationship-building</li><li>Extremely organised</li><li>Sales expertise</li></ul>",

            "au_default_job_title": "Customer Service Representative",
            "au_default_job_city": "Sydney",
            "au_default_job_state": "NSW",
            "au_default_company_name": "Sydney Coffee Wholesalers",
            "au_default_job_start_date": "01/2018",
            "au_default_job_description": "<ul><li>Ranked as most effective in CSR out of 20 representatives.</li><li>Developed and implemented a rewards programme to give back to the community, effectively donating $5000 annually.</li><li>Created four new processes and systems for increasing customer service satisfaction.</li><li>Improved retention by 20% through new product suggestions to customers requesting service cancellations.</li></ul>",

            "au_default_job_title2": "Receptionist",
            "au_default_company_name2": "Ace Medical Practice",
            "au_default_job_city2": "Sydney",
            "au_default_job_state2": "NSW",
            "au_default_job_start_date2": "01/2016",
            "au_default_job_end_date2": "01/2018",
            "au_default_job_description2": "<ul><li>Welcomed approximately 50 patients per day with warmth and kindness, ensuring smooth booking and checking in processes.</li><li> Prepared, compiled and filed upwards of 65 documents each day.</li> <li>Kept reception area clean and neat to give visitors a positive first impression of the practice.</li><li>Monitored premises security, screened visitors, updated logs and issued passes.</li></ul> ",


            "au_default_school_name": "Sydney University",
            "au_default_school_city": "Sydney",
            "au_default_school_state": "NSW",
            "au_default_graduation_year": "2016",
            "au_default_preview_fieldofexpertise": "Accounting",

            "au_default_preview_degreeearned": "",
            "au_schoolName_Text": "School or University Name",
            "au_schoolLoc_Text": "School or University Location",
            "au_next_finalize_btn_Label": "NEXT: FINALISE",
            "au_finalize_Label": "FINALISE",
            "au_summTips_Help_Text": "We’ll help you write a great one with expert content you can customise."
        };
    }

    if (RDL.portalExperiments.mprBeatTheBot2) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.mprBeatTheBot2.id] = {
            "choose_template_sub_heading": "Specially designed with our patent-pending technology<sup>1</sup> to be read correctly by resume screening software.",
            "choose_template_sub_heading_2": "Get past the screening software with our patent-pending technology<sup>1</sup> and get your resume into the hands of employers.",
            "choose_template_sub_heading_3": "Get past the screening software and track your application with our patent-pending technology<sup>1</sup>.",
            "choose_template_sub_heading_4": "Choose from our best templates for {0}.",
            "choose_template_sub_heading_traditional": "Make the right impression with a traditional template. Our patent-pending technology<sup>1</sup> ensures your resume gets past the resume screening software.",
            "choose_template_sub_heading_Modern": " Give your resume an up-to-date look with a modern template. Our patent-pending technology<sup>1</sup> ensures your resume gets past the resume screening software.",
            "choose_template_sub_heading_Creative": "Make a statement with a creative template. Our patent-pending technology<sup>1</sup> ensures your resume gets past the resume screening software.",
            "choose_template_heading_4": "Our patent-pending technology<sup>1</sup> gets you past the resume screening software.",
            "choose_template_foot_note": "Patent pending technology coming soon.",
            "choose_template_foot_note_count": 1
        };
    }

    if (RDL.portalExperiments.mprSkipRegister) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.mprSkipRegister.id] = {
            "skip_for_now": "Skip for now",
        };
    }
    if (RDL.portalExperiments.mprChooseTemplateBeforeFinalize) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.mprChooseTemplateBeforeFinalize.id] = {
            "create_resume_text": "Getting everything ready for you…",
            "choose_template_Label": "Templates",
            "next_choose_temp_btn": "NEXT: TEMPLATES",
            "next_finalize_btn": "NEXT: FINALIZE",
            "contact_skin_hover_h1": "This is just an example template",
            "contact_skin_hover_h2": "You’ll pick your own template and customize it in the last step.",
            "choose_temp_before_finalize_heading": "Last step! Choose a template. These are a good match for your experience."
        };
    }
    if (RDL.portalExperiments.mprEULocalizationFlow) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.mprEULocalizationFlow.id] = {
            "country_label": "Country",
            "select_country_label": "Select a Country",
            "select_country_page_title": "Where are you focusing your job search?",
            "select_country_page_sub_title": "We'll recommend the right templates for your target country.",
            "search_country_label": "Search Country",
            "see_templates_txt": "See templates",
            "languagesTitle": "Languages",
            "lang_header": "Add your language skills",
            "lang_subheader": "Include your native language and additional languages you speak.",
            "add_new_section": "NEW !",
            "langSelfAssessment": "Self-assessment",
            "nativeLangLabel": "Native language",
            "foreignLangLabel": "Language",
            "addForeignLang_Text": "Add another",
            "addNativeLang_Text": "Add another",
            "langSliderBeginner": "Beginner",
            "langSliderElementary": "Elementary",
            "langSliderIntermediate": "Intermediate",
            "langSliderUpperIntermediate": "Upper intermediate",
            "langSliderAdvanced": "Advanced",
            "langSliderMasterOrProficient": "Proficient",
            "select_Label": "Select",
            "deleteLanguage_Heading": "Delete this language?",
            "edit_Label": "View / Edit",
            "additional_sec_empty_subhead": "Fill it out or it will be deleted."
        };
    }

    if (RDL.portalExperiments.mprTTCEarly) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.mprTTCEarly.id] = {
            "next_heading": "NEXT: HEADING",
            "skip_for_now": "SKIP FOR NOW",
            "skip_skill_heading": "Are you sure you don’t want to add skills? ",
            "skip_skill_content": "Including skills on your resume is a great way to quickly show employers you’re a match for the job.<br/> <br/> It can even help get you an interview!",
            "enter_jobtitle_heading": "Enter a job title so we can find the best skills for you",
            "jobtitle_sub_heading": "You can add your own skills on the next page too.",
            "job_title_examples": "Here are some example job titles",
            "skil_ttc_search_placeholder": "Cashier",
            "tool_tip_jobtitle": "<h1 class='tooltip-title'>Find the best skills</h1><h2 class='tooltip-description'>Just enter a job title to see what skills recruiters are looking for.</h2>",
            "tool_tip_ttc_jobtitle": "<h1 class='tooltip-title'>Search for more skills</h1><h2 class='tooltip-description'>You can enter another job title to see different skills</h2>",
            "tool_tip_ttc": "<h1 class='tooltip-title'> Add skills with a click</h1><h2 class='tooltip-description'>Choose skills that match your background.</h2>",
            "ttc_label": "Here are some popular skills to get you started",
            "msg_gibberish": "We did not recognize <b>[@USER_INPUT]</b> as a job title. <br />Check your spelling or try the popular pre-written examples below.",
            "msg_confidence_high": "Showing results for <b>[@JOB_TITLE]</b>.",
            "msg_confidence_medium": "Showing results for <b>[@JOB_TITLE]</b>. <br />No results for <b>[@USER_INPUT]</b>. Try the pre-written examples below. Or search for something else.",
            "msg_confidence_low": "Did you mean <b>[@JOB_TITLE]</b>? <br />We did not find results for <b>[@USER_INPUT]</b>. Use the pre-written examples below. Or check your spelling and try again.",
            "popularJobTitles": ["customer service representative", "sales associate", "cashier", "registered nurse", "administrative assistant", "server", "marketing coordinator", "receptionist", "teacher", "project manager", "waitress"],
            "skill_sub_heading": "We recommend including 4-8 skills altogether.",
        }
    }
    if (RDL.portalExperiments.fuzzyV3) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.fuzzyV3.id] = {
            "next_heading": "NEXT: HEADING",
            "skip_for_now": "SKIP FOR NOW",
            "skip_skill_heading": "Are you sure you don’t want to add skills? ",
            "skip_skill_content": "Including skills on your resume is a great way to quickly show employers you’re a match for the job.<br/> <br/> It can even help get you an interview!",
            "enter_jobtitle_heading": "Enter a job title so we can find the best skills for you",
            "jobtitle_sub_heading": "You can add your own skills on the next page too.",
            "job_title_examples": "Here are some example job titles",
            "skil_ttc_search_placeholder": "Cashier",
            "tool_tip_jobtitle": "<h1 class='tooltip-title'>Find the best skills</h1><h2 class='tooltip-description'>Just enter a job title to see what skills recruiters are looking for.</h2>",
            "tool_tip_ttc_jobtitle": "<h1 class='tooltip-title'>Search for more skills</h1><h2 class='tooltip-description'>You can enter another job title to see different skills</h2>",
            "tool_tip_ttc": "<h1 class='tooltip-title'> Add skills with a click</h1><h2 class='tooltip-description'>Choose skills that match your background.</h2>",
            "ttc_label": "Here are some popular skills to get you started",
            "lbl_gibberish": "Search for pre-written examples",
            "msg_gibberish": "<span class='search-check-suggestion ttc-search-suggestions'>Check your spelling or try the popular pre-written examples below.</span><span class='search-showing-results ttc-search-suggestions'>We did not recognize <b>[@USER_INPUT]</b> as a job title. </span>",
            "lbl_confidence_high": "Search for pre-written examples",
            "msg_confidence_high": "<span class='search-showing-results ttc-search-suggestions'>Showing results for <b>[@JOB_TITLE]</b><span>",
            "lbl_confidence_medium": "Search for pre-written examples",
            "msg_confidence_medium": "<span class='search-check-suggestion ttc-search-suggestions'>Try the pre-written examples below. Or search for something else.</span><span class='search-showing-results ttc-search-suggestions'>Showing results for <b>[@JOB_TITLE]</b></span>",
            "lbl_confidence_low": "Search for pre-written examples",
            "msg_confidence_low": "<span class='search-check-suggestion ttc-search-suggestions'>We did not find results for <b>[@USER_INPUT]</b>. Use the pre-written examples below. Or check your spelling and try again.</span><span class='search-showing-results ttc-search-suggestions'>Showing results for <b>[@JOB_TITLE]</b></span>",
            "popularJobTitles": ["customer service representative", "sales associate", "cashier", "registered nurse", "administrative assistant", "server", "marketing coordinator", "receptionist", "teacher", "project manager", "waitress"],
            "skill_sub_heading": "We recommend including 4-8 skills altogether.",
            "placeholder_confidence_low": "Ex: Cashier",
            "placeholder_confidence_medium": "Ex: Cashier",
            "placeholder_gibberish": "Ex: Cashier",
            "placeholder_confidence_high": "Ex: Cashier",


        }
    }
    if (RDL.portalExperiments.featureGateTTC) {
        RDL.ExperimentsLocalization[RDL.portalExperiments.featureGateTTC.id] = {
            "basic": "Basic",
            "basic_tip": "Gives you access to 4 <b>Basic</b> templates and limited support while building your resume.",
            "premium": "Premium",
            "premium_tip": "<b>Premium</b> gives you access to unlimited templates that will get you noticed by employers. Plus unlimited resume building support.",
            "premium_free_bullet_points_heading": "You’ve used all of your free pre-written bullet points.",
            "unlock_premium": "Unlock Premium",
            "upgrade_unlock_premium": "Unlock premium",
            "keep_premium": "Keep Premium",
            "use_basic_instead": "Use Basic Instead",
            "premium_benefit_question": "What do I get with Premium?",
            "create_bullet_points_description": "Create your own bullet points by typing directly into the box on the right. Or, upgrade to Premium today and unlock all of our pre-written bullet points, as well as more great premium features.",
            "unlock_bullet_points_heading": "You’ve used all of your free bullet points. Unlock all bullet points by upgrading to premium. ",
            "premium_access": "Premium Access",
            "premium_benefits": "Premium gives you access to unlimited resume building support that will get you noticed by employers.<br/><br/><b>It includes:</b>",
            "premium_benefits_bullet_points": "<li>Unlimited pre-written bullet points</li>\n <li>Unlimited templates</li>\n <li>Unlimited cover letters</li>"
        }
    }
}

function handleJSCSS(data) {
    try {
        if (data.hotFixJS) {
            eval(data.hotFixJS);
        }
        if (data.hotFixCSS) {
            var css = document.createElement('style');
            css.type = 'text/css';
            css.innerHTML = data.hotFixCSS;
            document.getElementsByTagName("head")[0].appendChild(css);
        }
    }
    catch (ex) {
        console.log(ex);
     }
}

function setPortalSkin() {
    let sknCD = RDL.GetQueryString('skin');
    if (sknCD) {
        var isValidSkin = false;
        if (RDL.skins && RDL.skins.length > 0) {
            isValidSkin = RDL.skins.some(function (element) { return element.skinCD == sknCD.toUpperCase() });
        }
        if (isValidSkin) {
            RDL.SkinFromPortal = sknCD.toUpperCase(); //necessary to keep it in upper case
            RDL.getTemplateFromSkin(RDL.SkinFromPortal); // load skin htm file
        }
    }
}

function handleConfig(result, resolve) {
    var data = JSON.parse(result);
    RDL.portalExperiments = {};
    handleJSCSS(data);
    updateRDLWithConfiguration(data);
    setExperimentLocalizationObject();
    segmentKey = data.segmentKey;
    //MPINTL-1588 : returning user experiment
    RDL.returnUserExperimentVariant = RDL.readCookie("isReturningVariant") == "true";
    if (data.enableNewRelic) {
        addNewRelic(data.newRelicApplicationID, data.sampleDenominator);
    }
    // if (RDL.isES && data.enableFreshChat == true) {
    //     RDL.freshChatToken = data.freshChatToken;
    //     RDL.freshChatTag = data.freshChatTag;
    // }
    RDL.executeBuilderStepFlow = RDL.isBaseRoute && !!getBuilderStep() && data.enableDirectFlow;
    var templateFlow = RDL.GetQueryString('templateflow');
    var docID = RDL.GetQueryString('docid')
    if (templateFlow && templateFlow.toLowerCase() == 'contact' && docID) {
        RDL.executeBuilderStepFlow = false;
    }

    if (!RDL.useContentBlobForSVGs) {
        data.skins.forEach(function (s) {
            s.blobUrl = data.externalLinks.configSvcBlobUrl + "SkinImages/" + s.skinCD.toLowerCase() + (s.skinCD.startsWith("SRZ") || s.skinCD.startsWith("TRZ") ? ".png" : ".svg");
            s.imageURL = data.externalLinks.configSvcBlobUrl + "SkinImages/" + s.skinCD.toLowerCase() + (s.skinCD.startsWith("SRZ") || s.skinCD.startsWith("TRZ") ? ".png" : ".svg");
            s.htmlURL = data.externalLinks.configSvcBlobUrl + s.skinCD + ".htm";
        });
    } else {
        data.skins.forEach(function (s) {
            if (s.blobURL && s.blobURL.substring(0, 1) == "/") {
                s.blobURL = s.blobURL.substring(1, s.blobURL.length); //remove head slash
            }
            s.imageURL = RDL.Paths.ResourcePath + s.blobURL;
            s.blobURL = RDL.Paths.ResourcePath + s.blobURL;
            s.htmlURL = getSkinHtmlPath() + s.skinCD + ".htm";
        });
    }
    configLoaded = true;
    setSegmentProperties();
    if (!isMacMachine && RDL.loadSegmentEarly) {
        loadJs(segmentUrl);
    }
    downLoadAccountsJs();
    getAdminUiExperiments();
    if (resolve)
        resolve(data);
    setInterval(function () {
        RDL.IsUserExist();
    }, 15 * 60 * 1000);
    // Added to handle personal website link logic for Zety against ZTY-316
    window.globalCompVars.personalWebsiteApiPath = RDL.personalWebsiteApiPath;

}

function setSegmentProperties() {
    if (RDL.externalLinks.segmentUrl) {
        segmentUrl = RDL.externalLinks.segmentUrl;
    }
    window.segment = {
        Writekey: RDL.segmentKey,
        Integrations: (RDL.analyticsIntegration) ? RDL.analyticsIntegration : null
    }
    window.segment.CommonProps = {
        'builder type': 'Resume Wizard',
        'Platform': 'Web',
        'Feature Set': 'Resumes'
    }
}

function updateRDLWithConfiguration(data) {
    var gtmKey1 = data.gtmKey1,
        gtmKey2 = data.gtmKey2,
        googleMapappendGTMQueryStringsKey = data.googleMapappendGTMQueryStringsKey,
        gaKey = data.gaKey;
    Object.assign(RDL.Portal, { gtmKey1: gtmKey1, gtmKey2: gtmKey2, googleMapappendGTMQueryStringsKey: googleMapappendGTMQueryStringsKey, gaKey: gaKey });
    Object.assign(RDL.Paths, data.externalLinks,
        {
            BaseUrl: data.externalLinks.dashboardLink,
            privacyURL: data.externalLinks.privacyPolicyLink,
            SellPageUrl: data.externalLinks.paymentLink,
            AccountsURL: data.externalLinks.accountsURL,
            termsOfUseURL: data.externalLinks.termsOfUseLink,
            ResumeCheckUrl: data.externalLinks.resumeCheckUrl,
            contactUsURL: data.externalLinks.contactusLink,
            mysettingsURL: data.externalLinks.mysettingLink
        });
    Object.assign(RDL.PortalSettings, {
        defaultPortalType: "3",
        ConfigurePortal: data.portalID,
        ConfigurePortalCd: data.portalCD,
        ConfigureProductId: data.productID,
        ConfigureProductCd: data.productCD,
        ConfigurePortalName: data.portalName,
        ConfigureClientCd: data.clientCD,
        ShareResumeURL: data.externalLinks.shareUrl
    });
    Object.assign(RDL.VisitorApiSetting, {
        JSURL: data.externalLinks.visitorAPIUrl,
        PRODUCT_CODE: data.productCD
    });

    Object.assign(RDL, data,
        {
            oldUrl: data.externalLinks.oldEditorUrl && data.externalLinks.oldEditorUrl.trim() != "" ? data.externalLinks.oldEditorUrl : null,
            BestJobMatchDelayTime: data.bestJobMatchDelayTime,
            facebookClientID: data.facebookAppId,
            isTTCAddOrRemove: true,
            templateId: RDL.Portal.templateId ? RDL.Portal.templateId : "-3",
            steps: data.steps ? data.steps : undefined,
            styleSheetName: data.styleSheetName ? data.styleSheetName : "RbtoHtml2",
            configServiceBlobUrl: data.externalLinks.configSvcBlobUrl,
            CoverLetterUrl: data.externalLinks.coverLetterUrl,
            RenewSuspendedSubscription: data.externalLinks.paymentLink,
            ResumeReviewUrl: data.externalLinks.resumeReviewUrl,
            ResumeWritingUrl: data.externalLinks.resumeWritingUrl,
            IsLCSEOFlow: false,
            DebounceTime: data.googleMapsDebounceTime ? parseInt(data.googleMapsDebounceTime) : 0,
            cultureCD: data.languageCulture,
            isDegreeDataLocal: data.isDegreeDataLocal || false,
            showContactExtraDetails: data.enableAdditionalFields || false,
            clientEventsUrl: data.externalLinks.clientEventsUrl,
            date: (new Date(2017, 10, 23)),
            randomPhotoNumber: Math.random(),
            UserConsent: true,
            dropBoxDriveKey: data.dropBoxAPI && data.dropBoxAPI.key ? data.dropBoxAPI.key : 'qpw0ky3psxs3hsz', // personal test key :'qpw0ky3psxs3hsz'; 
            googlePickerInfo: data.googlePickerAPI,
            isNewV3: data.EnableV3Exp
        }
    );
    Object.assign(RDL, {
        chooseTemplateLP01Test: isUK() && RDL.templateCarouselLPFlow && !RDL.isCreateNew // LP experiment
    });
    if (RDL.localizeDefinitionTips)
        Object.assign(RDL, {
            Definition_Tips: data.definition_tips,
            intlPhotoSkins: "ATA1 MTA3 MCA2 MLU4 MLU6 MLU5 MLU7 MLF1 MLF2 MLF3 MLF4 MLF5 MLF6 MLI1 MLJ1 MLJ2 MLJ3 MLJ4 MLJ5 MLJ6 MLJ7 MLI6 MLK1 MLK3 MLK5 MLK6 MLK7 MLK8 MLM6 MLM7 MLM8 MLD2",
            roundPhotoSkins: "MLJ2 MLJ5 MLK7",
            PopularSkins: data.popularSkins || " ",
            NewSkins: data.newSkins || " ",
        });
    if (data.templateId)
        Object.assign(RDL, {
            templateId: data.templateId
        });
    if (RDL.isFR)
        Object.assign(RDL, {
            PopularSkins: "MLT6 MLU4 MLF6",
            NewSkins: "MLF1 MLF2 MLF3"
        });
    if (!RDL.UserConsent)
        Object.assign(RDL, {
            UserConsent: document.cookie.search(/consent=1/) > -1
        });
}

function setUpGoogleUploadDropBox() {
    loadJsWithKey("https://www.dropbox.com/static/api/2/dropins.js", "dropboxjs", RDL.dropBoxDriveKey);

    if (!RDL.googlePickerInfo) {
        // personal test key
        RDL.googlePickerInfo = {
            "developerKey": "AIzaSyBrCK5V3-4CF6jf0XxudVGJETxD5DNYfJo",
            "clientId": "865460071118-mp86e6c7dslk20qnqb504cjfoag79olg.apps.googleusercontent.com",
            "appId": "865460071118"
        };
    }
    loadJs("https://apis.google.com/js/api.js?onload=loadPicker");
}

function isAffiliateTraffic() {
    var afltTrafic = false;
    var templateFlow = RDL.GetQueryString('templateflow');
    var hiwBDFlow = RDL.GetQueryString('bdflow');
    if ((RDL.readCookie('BDLP') != null || hiwBDFlow != null) || RDL.readCookie('lp') == 'MPRUKZLP06' || templateFlow || RDL.executeBuilderStepFlow) {
        afltTrafic = true;
    }
    return afltTrafic;
}

function getBuilderStep() {
    var builderStep = RDL.GetQueryString('builderstep');
    if (builderStep) {
        if (isIPAD() && builderStep == 'selectresume') {
            builderStep = "contact";
        }
        else if (builderStep == 'finalize') {
            builderStep = "addsection";
        }
        RDL.createCookie('builderstep', builderStep.toLowerCase(), null);
    }
    return builderStep;
}

function isTemplateFlow() {
    var isValidTemplateFlow = false;
    var templateFlow = RDL.GetQueryString('templateflow');
    if (templateFlow && RDL.isBaseRoute && (templateFlow.toLowerCase() == 'selectresume' || templateFlow.toLowerCase() == 'contact' || templateFlow.toLowerCase() == 'choosetemplate')) {
        RDL.templateFlowValue = templateFlow.toLowerCase();
        if (isIPAD() && RDL.templateFlowValue == 'selectresume') {
            RDL.templateFlowValue = "contact";
        }
        isValidTemplateFlow = true;
    }
    return isValidTemplateFlow;
}

function isLP27Flow() {
    var isLP27Flow = false;
    if (RDL.readCookie('BDLP') != null && RDL.isBaseRoute) {
        isLP27Flow = true;
    }
    return isLP27Flow;
}

function handleSkins() {
    RDL.skins.filter(function (skin) {
        return skin.skinCD !== RDL.selectedSkin;
    }).forEach(function (skin) {
        var skinName = skin.skinCD + '.htm';
        RDL.getSkinHtml(skinName, true);
    });
}
function getSkinHtmlPath() {
    var skinPath = RDL.configServiceBlobUrl;
    return skinPath;
}

function termConditions(event) {
    //TODO
    event.preventDefault();
    RDL.Paths.termsOfUseURL ? window.open(RDL.Paths.termsOfUseURL) : window.open(event.target.href);
}

function privacyPolicy(event) {
    //TODO
    event.preventDefault();
    RDL.Paths.privacyURL ? window.open(RDL.Paths.privacyURL) : window.open(event.target.href);
}

function getGAClientId() {
    var clientId = "";
    window.ga && ga(function (tracker) {
        clientId = tracker.get('clientId');
    });
    return clientId;
}

function clearAndRedirect(redirectPath) {
    if (!isRedirectDone) {
        RDL.logMessage += "\n login Claims Call cookiecollection - " + document.cookie + "\n";
        RDL.logMessage += "\n Cookie Enabled - " + navigator.cookieEnabled + "\n";
        var errorObj = {
            ErrorMessage: 'RWZV2 Logging-' + redirectPath + RDL.logMessage, LogAsInfo: true
        };
        RDL.LogError(errorObj.ErrorMessage, '', errorObj.LogAsInfo, function () {
            RemoveSelectedIndustryFromLocalStorage(); // clear local storage
            RDL.logMessage = "";
            isRedirectDone = true;
            RDL.delete_cookie(BoldAuthCookieName, RDL.Portal.cookieDomain);
            RDL.delete_cookie("userinfo", RDL.Portal.cookieDomain);
            RDL.delete_cookie("UserStatus", RDL.Portal.cookieDomain);
            RDL.delete_cookie("useruid", RDL.Portal.cookieDomain);
            if (window.indexedDB) {
                window.indexedDB.deleteDatabase("localforage");
            }
            window.location = redirectPath;
        });
    }
}
function forceRedirect(redirectPath) {
    if (!isRedirectDone) {
        RDL.logMessage += "\n login Claims Call cookiecollection - " + document.cookie + "\n";
        RDL.logMessage += "\n Cookie Enabled - " + navigator.cookieEnabled + "\n";
        var errorObj = {
            ErrorMessage: 'RWZV2 Logging-' + redirectPath + RDL.logMessage, LogAsInfo: true
        };
        RDL.LogError(errorObj.ErrorMessage, '', errorObj.LogAsInfo, function () {
            RDL.logMessage = "";
            isRedirectDone = true;
            window.location = redirectPath;
        });
    }
}
function createGuestUser() {
    RDL.logMessage += "\n createGuestUser called.";
    if (RDL.Portal.useAccountsJs) {
        if (typeof BOLD == "object" && typeof BOLD.Accounts.createGuest == 'function' && configLoaded) {
            RDL.createUserCallCounter++;
            clearTimeout(RDL.createUserTimer);
            RDL.createUserTimer = setTimeout(function () {
                RDL.createUserCallCounter = 0;
            }, RDL.loopTimeGapInSec * 1000);
            RDL.logMessage += "\n createGuestUser createUserCallCounter" + RDL.createUserCallCounter;
            if (RDL.createUserCallCounter > RDL.maxloopCount) {
                clearAndRedirect("/?forceRedirect=StuckInUserCreation")
            }
            isAccUserCalled = true;
            isCreateGuestInProgress = true;
            BOLD.Accounts.createGuest(RDL.PortalSettings.ConfigureProductCd, null, location.href).then(function (data) {
                clearInterval(createGuestUserTimer);
                PostGuestCreated(data.GuestUserID);
                isCreateGuestInProgress = false;
            }, function (error) {
                RDL.logMessage += "\n error occured in createGuest" + JSON.stringify(error);
                isCreateGuestInProgress = false;
                //clearAndRedirect("/?forceRedirect=StuckInUserCreation");
                //clearInterval(createGuestUserTimer);
            });
            clearInterval(createGuestUserTimer);
        }
    }
    else {
        if (typeof CreateGuestUser == 'function' && configLoaded) {
            var refCookieId = "14";
            var refCookie = RDL.readCookie("ref");
            if (refCookie != null && refCookie != undefined) {
                refCookieId = refCookie
            }

            RDL.createUserCallCounter++;
            clearTimeout(RDL.createUserTimer);
            RDL.createUserTimer = setTimeout(function () {
                RDL.createUserCallCounter = 0;
            }, RDL.loopTimeGapInSec * 1000);
            RDL.logMessage += "\n createGuestUser createUserCallCounter" + RDL.createUserCallCounter;
            if (RDL.createUserCallCounter > RDL.maxloopCount) {
                clearAndRedirect("/?forceRedirect=StuckInUserCreation")
            }
            isAccUserCalled = true;
            CreateGuestUser(RDL.Portal.portalId, RDL.Paths.AccountsURL, refCookieId);
            clearInterval(createGuestUserTimer);
        }
    }
}

function generateClaims() {
    if (typeof setguestuserclaims == 'function') {
        setguestuserclaims(userUIdFrmExtrnlSite, 'RWZ', RDL.Paths.AccountsURL);
        clearInterval(generateClaimsTimer);
    }
}

function PostGuestCreated(userUID, claimCall) {
    if (!userUID && RDL.readCookie(BoldAuthCookieName) == null && RDL.readCookie("userinfo") && RDL.readCookie("userinfo").length > 0) {
        // case: if Boldauth is missing & only old userinfo exists & userid comes null from accounts, so clear the userInfo cookie.
        RDL.delete_cookie("userinfo", RDL.Portal.cookieDomain);
    }

    if (claimCall == null) {
        RDL.Claims(handleClaims);
    }
    else {
        clearInterval(postGuestUserTimer);
        postGuestUserTimer = setInterval(function () {
            handlePostGuestCreated();
        }, 200);
    }
}

function handlePostGuestCreated() {
    if (window.appEntry && postGuestCreatedCalled == false && RDL.UserClaims) {
        postGuestCreatedCalled = true;
        clearInterval(postGuestUserTimer);
        if(window.appEntry.isPostGuestUserCreationProcessingCalled == false){
            window.appEntry.postGuestUserCreationProcessing();
        }
        if (isHandlePostPageLoadCalled == false) {
            handlePostPageLoad();
        }
    }
}

function getPortalInfo() {
    var portalCd = null;
    var portalUrl = null;
    var rewriteBlobContent = false;
    var rewriteBuilderApi = false;
    portalCd = RDL.portalCd;
    cookieDomain = "." + RDL.domain;
    switch (RDL.portalCd) {
        case "lca":
            basePath = "/build-resume";
            defaultSkin = "CBG1";
            portalId = "3";
            templateId = "-3";
            useAccountsJs = true;
            RDL.isLCA = true;
            RDL.cultureCD = "en-US";
            rewriteBuilderApi = true;
            break;
        case "mpr":
            basePath = "/build-resume";
            defaultSkin = "CBG1";
            portalId = "16";
            templateId = "-3";
            useAccountsJs = true;
            RDL.isMPR = true;
            RDL.isMPROrMPCL = true;
            RDL.cultureCD = "en-US";
            rewriteBlobContent = true;
            rewriteBuilderApi = true;
            break;
        case "muk":
            basePath = "/build-cv";
            defaultSkin = "CBA1";
            portalId = "29";
            templateId = "1662";
            useAccountsJs = true;
            RDL.cultureCD = "en-GB";
            RDL.isMPUK = true;
            RDL.enableResumeCheck = false;
            rewriteBlobContent = true;
            rewriteBuilderApi = true;
            break;
        case "mfr":
            basePath = "/creer-cv";
            defaultSkin = "CBA1";
            portalId = "32";
            templateId = "-5";
            useAccountsJs = true;
            RDL.cultureCD = "fr-FR";
            rewriteBlobContent = true;
            rewriteBuilderApi = true;
            break;
        case "mes":
            basePath = "/crear-cv";
            defaultSkin = "CBA1";
            portalId = "33";
            templateId = "1660";
            useAccountsJs = true;
            RDL.cultureCD = "es-ES";
            rewriteBlobContent = true;
            rewriteBuilderApi = true;
            break;
        case "mbr":
            basePath = "/criar-curriculo";
            defaultSkin = "CBA1";
            portalId = "62";
            templateId = "-6";
            useAccountsJs = true;
            RDL.cultureCD = "pt-BR";
            rewriteBlobContent = true;
            rewriteBuilderApi = true;
            break;
        case "mit":
            basePath = "/crea-curriculum";
            defaultSkin = "CBA1";
            portalId = "37";
            templateId = "-7";
            useAccountsJs = true;
            RDL.cultureCD = "it-IT";
            rewriteBlobContent = true;
            rewriteBuilderApi = true;
            break;
        case "mpc":
            basePath = "/build-resume";
            defaultSkin = "CBG1";
            portalId = "20";
            templateId = "-3";
            useAccountsJs = false;
            RDL.isMPCL = true;
            RDL.isMPROrMPCL = true;
            RDL.cultureCD = "en-US";
            rewriteBlobContent = true;
            rewriteBuilderApi = true;
            break;
        case "zty":
            basePath = "/resume";
            defaultSkin = "SRZ1";
            portalId = "84";
            templateId = "-3";
            useAccountsJs = true;
            RDL.isZTY = true;
            RDL.cultureCD = "en-US";
            rewriteBlobContent = true;
            rewriteBuilderApi = true;
            break;
        case "hlm":
            basePath = "/build-resume";
            defaultSkin = "CBG1";
            portalId = "67";
            templateId = "-3";
            useAccountsJs = true;
            RDL.isHLM = true;
            RDL.cultureCD = "en-US";
            RDL.isWhiteLabel = false;
            rewriteBlobContent = true;
            rewriteBuilderApi = true;
            break;
        case "jbh":
            basePath = "/build-resume";
            defaultSkin = "CBG1";
            portalId = "78";
            templateId = "-3";
            useAccountsJs = true;
            RDL.isJBH = true;
            RDL.isWhiteLabel = false;
            rewriteBlobContent = true;
            RDL.resumeCheckDisabledForAll = true;
            rewriteBuilderApi = true;
            break;
        case "rsb":
            basePath = "/build-resume";
            defaultSkin = "SRZ1";
            portalId = "69";
            templateId = "-3";
            useAccountsJs = true;
            RDL.isRSB = true;
            RDL.isWhiteLabel = true;
            rewriteBlobContent = true;
            break;
    }
    return {
        portalCd: portalCd, url: RDL.domain, slug: basePath, defaultSkin: defaultSkin, portalId: portalId, templateId: templateId,
        useAccountsJs: useAccountsJs, cookieDomain: cookieDomain,
        rewriteBlobContent: rewriteBlobContent, rewriteBuilderApi: rewriteBuilderApi
    };
}

function isMac() {
    if (navigator.userAgent.match(/Mac OS/i))
        return true;
    else
        return false;
}

function applyAdminUIChanges(exprName, exprIndex) {
    var root;
    switch (exprName) {
        case "mprDesktopUICleanUP":
            if (exprIndex == 3) {
                root = document.getElementsByTagName('html')[0];
                root.classList.add('e-ui-cleanup');
            }
            break;
        case "lcBeatTheBotExpr":
            if (exprIndex == 3) {
                root = document.getElementsByTagName('html')[0];
                root.classList.add('e-beat-the-bot');
            }
            break;        
    }
}

function getAdminUiExperiments() {
    var adminUIExperiments = [];
    for (var i in RDL.portalExperiments) {
        RDL.portalExperiments[i].isVisitor == true ? adminUIExperiments.push([i, RDL.portalExperiments[i]]) : "";
    }
    RDL.ExperimentInfo = RDL.ExperimentInfo || [];
    var exprData = localStorage.getItem("uiexp_conducted_experiments");
    if (exprData) {
        var exprVal = JSON.parse(exprData);
        if (exprVal) {
            adminUIExperiments.forEach(function getVariant(experiment) {
                var exprObjectName = experiment[0];
                var experiment = experiment[1];
                var experimentIndex = exprVal[experiment.id] ? exprVal[experiment.id].variant : -1;
                if (experimentIndex > -1) {
                    applyAdminUIChanges(exprObjectName, experimentIndex);
                    var exprVariantName = "Baseline";
                    if (experimentIndex == 2)
                        exprVariantName = "Variability Estimator";
                    else if (experimentIndex > 2)
                        exprVariantName = experiment.variants ? experiment.variants[experimentIndex] : "";
                    RDL.ExperimentInfo.push({
                        experimentId: experiment.id, experimentName: experiment.name, variant: experimentIndex, variantName: exprVariantName
                        , isGoverned: exprVal[experiment.id] ? exprVal[experiment.id].isGoverned : false
                    });
                }
            });
        }
    }
}

var RDL = window.RDL || {};

RDL.createCookie = function (name, value, days, domain) {
    var expires = "";
    var _domain = "";
    var secure = ";secure";
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toGMTString();
    } else
        expires = "";

    if (domain) {
        _domain = "; domain=" + domain;
    }
    else if (RDL.Portal.cookieDomain) {
        _domain = "; domain=" + RDL.Portal.cookieDomain;
    }
    document.cookie = name + "=" + value + secure + expires + _domain + "; path=/;";
}


RDL.readCookie = function (name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}
RDL.isOptimization = false;
RDL.ausLocalizationExp = false;
RDL.auVariance = '';
RDL.multiColSectionSkins = [];
RDL.beatTheBot2 = false;
RDL.useDefaultPageSizeA4 = false;
RDL.UserExperiments = {};
RDL.LCDOTCom = "livecareer.com";
RDL.builderVersion = "rb wizard";
RDL.previousDocuments = [];
RDL.avoidLoggedinCss = false;
RDL.showHeader = true;
RDL.prevDocTabVisible = false;
RDL.Localization = "";
RDL.Definition_Tips = [];
RDL.UserConsent = false;
RDL.strategyId = 14;
RDL.isMPR = false;
RDL.isLCA = false;
RDL.isMPCL = false;
RDL.isMPROrMPCL = false;
RDL.isZTY = false;
RDL.isHLM = false;
RDL.isJBH = false;
RDL.isWhiteLabel = false;
RDL.Portal = RDL.Portal || getPortalInfo();
RDL.mapsClientKey = "gme-boldna";
RDL.isloggedIn = false;
RDL.gatriggeredFor = "";
RDL.EnterBuildertriggered = false;
RDL.pageLoaded = false;
RDL.applyCardCss = false;
RDL.UserConsent = true;
RDL.Paths = {};
RDL.Paths.ResourcePath = getResourceUrl();
RDL.Paths.RWZBlobUrl = getRWZBlobURL();
window.globalCompVars = {};

window.globalCompVars.BaseApiUrl = RDL.Paths.BaseApiUrl = getApiUrl();
window.globalCompVars.BaseJsgUrl = RDL.Paths.BaseJsgUrl = getJsgUrl();
window.globalCompVars.BaseApiUrlV2 = RDL.Paths.BaseApiUrlV2 = getApiUrl("v2");
window.globalCompVars.BaseApiUrlV3 = RDL.Paths.BaseApiUrlV3 = getApiUrl("v3");
RDL.Paths.BasePath = RDL.Portal.slug || RDL.Portal.basePath;
RDL.Paths.ImageBasePath = RDL.Paths.ResourcePath + "images/desktop/";
RDL.Paths.termsOfUseURL = '';
RDL.Paths.privacyURL = '';
RDL.Paths.signoutURL = '';
RDL.Paths.mysettingsURL = '';
RDL.Paths.contactUsURL = '';
RDL.executeDirectFunnelFlow = false;
RDL.VisitorApiSetting = {};
RDL.PortalSettings = {};
RDL.skins = {};
RDL.segmentKey = '';
RDL.guestUserID = null;
RDL.guestUserCreated = false;
RDL.isRefresh = true;
RDL.isBack = true;
RDL.isOverviewBack = false;
RDL.isEditingFinished = false;
RDL.loadedPageCalled = false;
RDL.googleLoginClientID = '';
RDL.facebookClientID = '';
RDL.scrollPos = 0;
RDL.maintainScroll = false;
RDL.Content = [];
RDL.files = [];
RDL.WindowH = window.innerHeight;
RDL.Paths.signInURL = '';
RDL.currentZoomValue = 1.5;
RDL.dragCurrentZoomValue = 1.5;
RDL.currentZoomIndex = 2;
RDL.OnBoarding_Popup = true;
RDL.isBlankName = false;
RDL.isdragMove = true;
RDL.isTablet = navigator.userAgent.match(/iPad/i) != null;
RDL.isJobHero = /jobhero/i.test(window.location.pathname);
RDL.countryDetails = { countryCode: "US", continentCode: "", isEuropianContinent: false, city: "", state: "", isEEACountry: false };
RDL.INVALID_ATTEMPT = 'fpcount';
RDL.isRWZFlow = true; //To be done conditionally
RDL.environmentURL = '';
RDL.maxloopCount = 3;
RDL.loopTimeGapInSec = 5;
RDL.createUserCallCounter = 0;
RDL.createUserTimer = undefined;
RDL.claimCallTimer = undefined;
RDL.isBDFlow = false;
RDL.builderStepValue = null;
RDL.templateFlowValue = null;
RDL.SkinFromPortal = null;
RDL.SkinThemeFromPortal = null;
RDL.claimCallCounter = 0;
RDL.ArrayFeatureSet = [];
RDL.JobTitleContentDetails = { experimentID: "", variation: "" }
RDL.EmployerContentDetails = { experimentID: "", variation: "" }
RDL.isBaseRoute = (location.pathname == RDL.Paths.BasePath || location.pathname == RDL.Paths.BasePath + '/');
RDL.isINTL = isINTL();
if (RDL.isTablet) {
    $html.classList.add("ipad");
}
RDL.defaultSkin = RDL.Portal.defaultSkin;
RDL.selectedSkin = '';
RDL.ShowResumeCheck = false;



RDL.CreateGuestUser = function () {
    reqAccountsGuestUserCreation = true;
    RDL.logMessage += "\n RDL.CreateGuestUser called.";
    clearInterval(createGuestUserTimer);
    if (!isCreateGuestInProgress) {
        createGuestUserTimer = setInterval(createGuestUser, 200);
    }
}

RDL.GenerateClaims = function () {
    clearInterval(generateClaimsTimer);
    generateClaimsTimer = setInterval(generateClaims, 200);
}

RDL.isNullOrWhitespace = function (input) {
    if (input == null || input == undefined) return true;
    return input.replace(/\s/g, '').length < 1;
}

RDL.GetElementPosition = function (element) {
    var rect = element.getBoundingClientRect();

    return offset = {
        top: rect.top + (window.scrollY || window.pageYOffset),
        left: rect.left + (window.scrollX || window.pageXOffset),
    };
}

RDL.GetQueryString = function (field, url) {
    var href = url || window.location.href;
    var reg = new RegExp('[?&]' + field + '=([^&#]*)', 'i');
    var string = reg.exec(href);
    return string ? string[1] : null;
};

RDL.isCreateNew = RDL.GetQueryString("mode") == "new" || RDL.readCookie("CookieCreateNew") == "1"; // 2nd resume case

RDL.AnimateToPosition = function (topPosition, duration, callback) {
    if (duration == null || duration == undefined) { duration = 400; }
    animateJS(document.querySelector('body'), 'scrollTop', topPosition, duration, true, '', function () {
        if (callback) { callback(); }
    });
}

RDL.ScrollToPosition = function (element, scrollPos) {
    if (!element) { element = document.body; }
    if (!scrollPos) { scrollPos = 0; }

    element.scrollTop = scrollPos;
}

RDL.TrackEvents = function (eventName, eventpropval, userid, islogin, skipTraitsToIterable) {
    if (RDL.UserConsent) {
        if (RDL.UserClaims && RDL.UserClaims.user_uid) {
            if (eventpropval != null)
                eventpropval["userId"] = RDL.UserClaims.user_uid;
            else
                eventpropval = { 'userId': RDL.UserClaims.user_uid };
        }
        if (typeof analytics != 'undefined' && typeof mixpanel != 'undefined' && typeof mixpanel.get_distinct_id != 'undefined') {
            trackEvent(eventName, eventpropval, userid, islogin, skipTraitsToIterable);
        }
        else {
            var TrackEventsInterval = setInterval(function () {
                if (typeof analytics != 'undefined' && typeof mixpanel != 'undefined' && typeof mixpanel.get_distinct_id != 'undefined') {
                    trackEvent(eventName, eventpropval, userid, islogin, skipTraitsToIterable);
                    clearInterval(TrackEventsInterval);
                }
            }, 100);
        }
    }
};

RDL.BuilderUsageTrackEvents = function (action, screenName, label, islogin, clickOption) {
    var eventpropval = {};
    if (clickOption) {
        eventpropval = { 'action': action, 'screen name': screenName, 'click option': clickOption }
    }
    else {
        eventpropval = { 'action': action, 'screen name': screenName }
    }
    RDL.TrackEvents('builder usage', eventpropval, null, islogin);
};
RDL.startPageLoader = function () {
    document.getElementById("page-loader") && document.getElementById("page-loader").classList.remove("hide");
}
RDL.closePageLoader = function () {
    document.getElementById("page-loader") && document.getElementById("page-loader").classList.add("hide");
}

RDL.getResourceValue = function (coreKey, INTLKey) {
    var value = "";
    value = RDL.isINTL ? RDL.Localization[INTLKey] : RDL.Localization[coreKey];

    if (!value) {
        console.log("Localization key " + (RDL.isINTL ? INTLKey : coreKey) + " not found.");
    }

    return value;
}

RDL.promiseAllResolveActivity = function () {
    var _jobTitle = RDL.GetQueryString("JobTitle");
    if (_jobTitle) {
        _jobTitle = _jobTitle.replace(/%20/g, " ").replace(/-/g, " ");
        _jobTitle = RDL.convertToTitleCase(_jobTitle);
        RDL.createCookie("LP_JobTitle", _jobTitle, null, RDL.Portal.cookieDomain);
    }
    addExperimentsLocalizedText();
}

RDL.convertToTitleCase = function (str) {
    var wordsFromStr = str.split(' ');
    var words = [];

    for (var i = 0; i < wordsFromStr.length; i++) {
        words.push(wordsFromStr[i].substring(0, 1).toUpperCase() + '' + wordsFromStr[i].substring(1).toLowerCase());
    }

    return words.join(' ');
}

RDL.LoadThirdPartyJS = function () {
    loadgtms();
    loadGAScriptWithKey();
    if (isMacMachine || !RDL.loadSegmentEarly) {
        loadJs(segmentUrl);
    }
}

RDL.SaveFirstTouchValuesFromQS = function () {
    var saveUTM_Campaign_First_Touch = RDL.GetQueryString("utm_campaign") == null ? "undefined" : RDL.GetQueryString("utm_campaign");
    var saveUTM_Content_First_Touch = RDL.GetQueryString("utm_content") == null ? "undefined" : RDL.GetQueryString("utm_content");
    var saveUTM_Medium_First_Touch = RDL.GetQueryString("utm_medium") == null ? "undefined" : RDL.GetQueryString("utm_medium");
    var saveUTM_Source_First_Touch = RDL.GetQueryString("utm_source") == null ? "undefined" : RDL.GetQueryString("utm_source");
    var saveUTM_Term_First_Touch = RDL.GetQueryString("utm_term") == null ? "undefined" : RDL.GetQueryString("utm_term");
    var utmFirstTouchCookieValue = "";
    if (saveUTM_Campaign_First_Touch)
        utmFirstTouchCookieValue = "saveUTM_Campaign_First_Touch-" + saveUTM_Campaign_First_Touch + "#";
    if (saveUTM_Content_First_Touch)
        utmFirstTouchCookieValue = utmFirstTouchCookieValue + "saveUTM_Content_First_Touch-" + saveUTM_Content_First_Touch + "#";
    if (saveUTM_Medium_First_Touch)
        utmFirstTouchCookieValue = utmFirstTouchCookieValue + "saveUTM_Medium_First_Touch-" + saveUTM_Medium_First_Touch + "#";
    if (saveUTM_Source_First_Touch)
        utmFirstTouchCookieValue = utmFirstTouchCookieValue + "saveUTM_Source_First_Touch-" + saveUTM_Source_First_Touch + "#";
    if (saveUTM_Term_First_Touch)
        utmFirstTouchCookieValue = utmFirstTouchCookieValue + "saveUTM_Term_First_Touch-" + saveUTM_Term_First_Touch + "#";

    if (utmFirstTouchCookieValue.length > 0)
        utmFirstTouchCookieValue = utmFirstTouchCookieValue.slice(0, -1); //remove the last #
    if (utmFirstTouchCookieValue.length > 0) {
        RDL.createCookie("UTMFirstTouchCookie", utmFirstTouchCookieValue.replace(/%22/g, '"'), null, window.location.host.substr(window.location.host.indexOf('.')));
    }
}

RDL.SaveLastTouchValuesFromQS = function () {
    var saveUTM_Campaign_Last_Touch = RDL.GetQueryString("utm_campaign") == null ? "undefined" : RDL.GetQueryString("utm_campaign");
    var saveUTM_Content_Last_Touch = RDL.GetQueryString("utm_content") == null ? "undefined" : RDL.GetQueryString("utm_content");
    var saveUTM_Medium_Last_Touch = RDL.GetQueryString("utm_medium") == null ? "undefined" : RDL.GetQueryString("utm_medium");
    var saveUTM_Source_Last_Touch = RDL.GetQueryString("utm_source") == null ? "undefined" : RDL.GetQueryString("utm_source");
    var saveUTM_Term_Last_Touch = RDL.GetQueryString("utm_term") == null ? "undefined" : RDL.GetQueryString("utm_term");
    var utmLastTouchCookieValue = "";
    if (saveUTM_Campaign_Last_Touch)
        utmLastTouchCookieValue = "saveUTM_Campaign_Last_Touch-" + saveUTM_Campaign_Last_Touch + "#";
    if (saveUTM_Content_Last_Touch)
        utmLastTouchCookieValue = utmLastTouchCookieValue + "saveUTM_Content_Last_Touch-" + saveUTM_Content_Last_Touch + "#";
    if (saveUTM_Medium_Last_Touch)
        utmLastTouchCookieValue = utmLastTouchCookieValue + "saveUTM_Medium_Last_Touch-" + saveUTM_Medium_Last_Touch + "#";
    if (saveUTM_Source_Last_Touch)
        utmLastTouchCookieValue = utmLastTouchCookieValue + "saveUTM_Source_Last_Touch-" + saveUTM_Source_Last_Touch + "#";
    if (saveUTM_Term_Last_Touch)
        utmLastTouchCookieValue = utmLastTouchCookieValue + "saveUTM_Term_Last_Touch-" + saveUTM_Term_Last_Touch + "#";

    if (utmLastTouchCookieValue.length > 0)
        utmLastTouchCookieValue = utmLastTouchCookieValue.slice(0, -1); //remove the last #
    if (utmLastTouchCookieValue.length > 0) {
        RDL.createCookie("UTMLastTouchCookie", utmLastTouchCookieValue.replace(/%22/g, '"'), null, window.location.host.substr(window.location.host.indexOf('.')));
    }
}

RDL.isAnyAuthCookieExists = function () {
    var anyAuthCookieExists = true;
    if (RDL.Portal.useAccountsJs) {
        if (RDL.readCookie("userinfo") == null && RDL.readCookie(BoldAuthCookieName) == null) {
            anyAuthCookieExists = false;
        }
    }
    return anyAuthCookieExists;
}

RDL.delete_cookie = function (name, domain) {
    var _domain = "";
    var date = new Date();
    date.setTime(date.getTime() - 1);
    var expires = "; expires=" + date.toGMTString();
    if (domain) {
        _domain = "; domain=" + domain;
    }
    document.cookie = name + "=;" + expires + _domain + "; path=/;";
};

RDL.LoginUserByAccountJs = function (emailAddress, password, EmailOptin, docId, previousEmail) {
    var otherTraits = [{ "docId": docId }];
    var optin = 0;
    if (EmailOptin == true) { optin = 1; }
    BOLD.Accounts.loginUser(emailAddress, password, RDL.PortalSettings.ConfigureProductCd, "Resumes", optin, otherTraits, previousEmail, null, "", "", window.location.href).then(function (data) {
        window.login.handleLoginResponse(data.userid, data.status);
    }, function () {
        RDL.closePageLoader();
    });
}
RDL.RegisterGuestUserByAccountsJs = function (guestUserUID, emailAddress, password, firstName, lastName, phoneNumber, mobileNumber, EmailOptin, docId, keepMeLoggedIn, previousEmail) {
    // RegisterGuestUser(guestUserUID, emailAddress, password, RDL.PortalSettings.ConfigurePortalCd, RDL.PortalSettings.ConfigureProductCd, RDL.Paths.AccountsURL, firstName, lastName, phoneNumber, mobileNumber, 'Resumes', "", EmailOptin, docId, keepMeLoggedIn, previousEmail);
    var otherTraits = [{ "docId": docId }];
    //let otherProperties = [{ "docId": docId}];
    var optin = 0;
    if (EmailOptin == true) { optin = 1; }
    BOLD.Accounts.registerGuest(guestUserUID, emailAddress, password, firstName, lastName, RDL.PortalSettings.ConfigureProductCd, "Resumes", optin, previousEmail, otherTraits, null, "", "", window.location.href).then(function (data) {
        //console.log(data);
        window.login.handleResponseV2(data.userid, data.status);
    }, function () {
        RDL.closePageLoader();
        // alert("ërror in register user");
    })
}

RDL.ForgotPassword = function (emailAddress) {
    //DirectForgotPassword(emailAddress, RDL.PortalSettings.ConfigureProductCd, RDL.PortalSettings.ConfigurePortalName, 'flow', encodeURI(window.location.origin + RDL.Paths.BasePath + window.location.search), RDL.Paths.AccountsURL);
    BOLD.Accounts.forgotPassword(emailAddress, RDL.PortalSettings.ConfigureProductCd, encodeURI(window.location.origin + RDL.Paths.BasePath + window.location.search), "Resumes").then(function (data) {
        window.login.handleForgotPasswordResponse(data.Status);
    }, function () {
        window.login.handleForgotPasswordResponse("Error");
    });
}
RDL.IsUserExist = function () {
    if (RDL.UserClaims && RDL.UserClaims.user_uid) {
        var url = RDL.Paths.BaseApiUrl + 'users/' + RDL.UserClaims.user_uid;
        var xmlhttp;
        xmlhttp = new XMLHttpRequest();
        xmlhttp.onload = function () {
            if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                var user = JSON.parse(xmlhttp.responseText);
                if (user == null || user == undefined) {
                    clearAndRedirect("/")
                }
            }
            else if (xmlhttp.readyState == 4 && xmlhttp.status == 400) {
                clearAndRedirect("/");
            }
        }
        xmlhttp.open("GET", url, true);
        xmlhttp.send();
    }
}

RDL.CreateOrGetUser = function (resolve) {
    if (typeof BOLD == "object" && typeof BOLD.Accounts.createGuest == 'function' && configLoaded && !isCreateGuestInProgress) {
        RDL.createUserCallCounter++;
        if (RDL.createUserCallCounter > RDL.maxloopCount) {
            clearAndRedirect("/?forceRedirect=StuckInUserCreation")
        }
        isCreateGuestInProgress = true;
        BOLD.Accounts.createGuest(RDL.PortalSettings.ConfigureProductCd, null, location.href).then(function (data) {
            clearInterval(createGuestUserTimer);
            clearInterval(postGuestUserTimer);
            isCreateGuestInProgress = false;
            if (data && data.claims && data.claims.user_uid) {
                RDL.UserClaims = data.claims;
                RDL.isloggedIn = (RDL.UserClaims.role != "User") ? false : true;
                if (RDL.isBaseRoute && !isTemplateFlow()) {
                    if (RDL.UserClaims.role == "Guest") {
                        postGuestUserTimer = setInterval(function () {
                            handlePostGuestCreated();
                        }, 200);
                    }
                }
                else {
                    hideHIWPage();
                }
                resolve();
            }
            else {
                RDL.CreateOrGetUser(resolve);
            }
        }, function () {
            isCreateGuestInProgress = false;
            RDL.CreateOrGetUser(resolve);
        });
    }
    else {
        setTimeout(function () { RDL.CreateOrGetUser(resolve); }, 100);
    }
}

RDL.Claims = function (callback, isAsync, resolve, skipAuthCookieCheck) {
    RDL.logMessage += "\n Claims isAnyAuthCookieExists-" + RDL.isAnyAuthCookieExists();
    RDL.logMessage += "\n Claims userinfo cookie-" + RDL.readCookie("userinfo");
    RDL.logMessage += "\n Claims BOLDAuth Cookie-" + RDL.readCookie(BoldAuthCookieName);
    RDL.logMessage += "\n Claims RDL.UserClaims-" + RDL.UserClaims;
    if (RDL.isAnyAuthCookieExists() == true || skipAuthCookieCheck) {
        if (isAsync) {
            if (RDL.GetQueryString('uid') != null && RDL.GetQueryString('uid') != '') {
                callAjax(true, RDL.Paths.BaseApiUrlV2 + 'user/claims?portalId=' + RDL.Portal.portalId + '&v=' + versionNumber + '&urlReferrer=' + escape(document.referrer) + '&cookieEnabled=' + navigator.cookieEnabled + '&uid=' + RDL.GetQueryString('uid') + '&culture=' + RDL.cultureCD, "GET", true, true, callback, resolve);
            }
            else {
                callAjax(true, RDL.Paths.BaseApiUrlV2 + 'user/claims?portalId=' + RDL.Portal.portalId + '&v=' + versionNumber + '&urlReferrer=' + escape(document.referrer) + '&cookieEnabled=' + navigator.cookieEnabled + '&culture=' + RDL.cultureCD, "GET", true, true, callback, resolve);
            }
        } else {
            if (RDL.GetQueryString('uid') != null && RDL.GetQueryString('uid') != '') {

                callAjax(true, RDL.Paths.BaseApiUrlV2 + 'user/claims?portalId=' + RDL.Portal.portalId + '&v=' + versionNumber + '&urlReferrer=' + escape(document.referrer) + '&cookieEnabled=' + navigator.cookieEnabled + '&uid=' + RDL.GetQueryString('uid') + '&culture=' + RDL.cultureCD, "GET", false, true, callback);
            }
            else {

                callAjax(true, RDL.Paths.BaseApiUrlV2 + 'user/claims?portalId=' + RDL.Portal.portalId + '&v=' + versionNumber + '&urlReferrer=' + escape(document.referrer) + '&cookieEnabled=' + navigator.cookieEnabled + '&culture=' + RDL.cultureCD, "GET", false, true, callback);
            }
        }

        RDL.claimCallCounter++;
        clearTimeout(RDL.claimCallTimer);
        RDL.claimCallTimer = setTimeout(function () {
            RDL.claimCallCounter = 0;
        }, RDL.loopTimeGapInSec * 1000);

        if (RDL.claimCallCounter > RDL.maxloopCount) {
            // redirect to LP.
            clearAndRedirect("/?forceRedirect=StuckInClaimCall")
        }

    }
    else {
        RDL.logMessage += "\n Claims CreateGuestUser() called.";
        RDL.CreateGuestUser();
        if (resolve)
            resolve('');
    }
}

window.addEventListener("load", function () {
    RDL.TriggerInitialPromises();
    RDL.pageLoaded = true;
});

if (window.location.href.toLowerCase().indexOf("utm_") > -1) {
    RDL.SaveFirstTouchValuesFromQS();
    RDL.SaveLastTouchValuesFromQS();
}

RDL.loadSvgs = function () {
    RDL.skins.forEach(function (element) {
        var img = document.createElement('img');
        if (RDL.useContentBlobForSVGs) {
            img.src = element.blobURL;
        } else if (!isIE) {
            img.src = RDL.configServiceBlobUrl + "SkinImages/" + element.skinCD.toLowerCase() + (element.skinCD.startsWith("SRZ") || element.skinCD.startsWith("TRZ") ? ".png" : ".svg");
        }
        document.getElementById('afterLoadContent').appendChild(img);
    });
}

RDL.loadFile = function () {
    if (RDL.skins.filter) {
        handleSkins();
    }
    else {
        var skinTimer = setInterval(function () {
            if (RDL.skins.filter) {
                clearInterval(skinTimer);
                handleSkins();
            }
        }, 100);
    }
}

RDL.getSkinHtml = function (skinName, isAsyncTrue) {
    try {
        var url = getSkinHtmlPath() + skinName;
        callAjax(true, url, 'GET', isAsyncTrue ? true : false, false, function (data) {
            var parser = new DOMParser();
            var htmlDoc = parser.parseFromString(data, "text/html");
            //EB-11749 :These multiple text comparisions are part of a temporary change.
            //Once the changes are done at skin level, this will be removed.
            //This replaces the word 'to' between from and to dates with its localized text
            (RDL.cultureCD && RDL.cultureCD.toLowerCase() != "en-us") && RDL.LocalizeFromEndDateToWordInSkin(htmlDoc);
            RDL.files[skinName] = htmlDoc;
        });
    }
    catch (ex) {
        console.log(ex);
    }
}
RDL.LocalizeFromEndDateToWordInSkin = function (htmlDoc) {
    try {
        if (RDL.localizationResumeRenderer.toDate_text) {
            htmlDoc.querySelectorAll("span[dependency='JSTD+EDDT']").forEach(function (spanNode) {
                if (spanNode && spanNode.innerText && spanNode.innerText.trim() &&
                    (spanNode.innerText.trim().toLowerCase() == "to" ||
                        spanNode.innerText.trim().toLowerCase() == "a" ||
                        spanNode.innerText.trim().toLowerCase() == "à")) {
                    spanNode.innerText = spanNode.innerText.replace(spanNode.innerText.trim(), RDL.localizationResumeRenderer.toDate_text);
                }
            });
        }
        if (RDL.localizationResumeRenderer.address_Label) {
            htmlDoc.querySelectorAll("span[class*='xslt_static_change'").forEach(function (spanNode) {
                if (spanNode && spanNode.innerText && spanNode.innerText.trim()) {
                    if (spanNode.innerText.trim().toLowerCase() == "address") {
                        spanNode.innerText = spanNode.innerText.replace(spanNode.innerText.trim(), RDL.localizationResumeRenderer.address_Label);
                    }
                    if (spanNode.innerText.trim().toLowerCase() == "phone") {
                        spanNode.innerText = spanNode.innerText.replace(spanNode.innerText.trim(), RDL.localizationResumeRenderer.phone_Label);
                    }
                    if (spanNode.innerText.trim().toLowerCase() == "email") {
                        spanNode.innerText = spanNode.innerText.replace(spanNode.innerText.trim(), RDL.localizationResumeRenderer.email_Label);
                    }
                    if (spanNode.innerText.trim().toLowerCase() == "expected in") {
                        spanNode.innerText = RDL.Localization.Graduation_Expected; //Grad year update feature localization MPINTL-880
                    }
                    if (RDL.localizationResumeRenderer.hPhoneText && spanNode.innerText.trim().toLowerCase() == "home:") {
                        spanNode.innerText = spanNode.innerText.replace(spanNode.innerText.trim(), RDL.localizationResumeRenderer.hPhoneText);
                    }
                    if (RDL.localizationResumeRenderer.cPhoneText && spanNode.innerText.trim().toLowerCase() == "mobile:") {
                        spanNode.innerText = spanNode.innerText.replace(spanNode.innerText.trim(), RDL.localizationResumeRenderer.cPhoneText);
                    }
                }
            });
        }
    } catch (error) {
        console.log(error);
    }
}
RDL.RunScratchFlow = function () {
    window.selectResume.scratchFlow();
}
RDL.getTemplateFromSkin = function (skin) {
    var skinCD = skin || (RDL.selectedSkin || RDL.defaultSkin || RDL.SkinFromPortal);
    var template = RDL.files[skinCD + '.htm'];
    if (!template) {
        RDL.getSkinHtml(skinCD + '.htm', false);
        template = RDL.files[skinCD + '.htm'];
        if (!template) {
            template = RDL.files[RDL.defaultSkin + '.htm'];
        }
    }
    return template;
}

RDL.isMultiColumnSkin = function (skinCD) {
    var isMultiColumn = false;
    var skinCD = skinCD || (RDL.selectedSkin || RDL.defaultSkin);
    var container = RDL.getTemplateFromSkin(skinCD).querySelectorAll("container");
    if (container != null && container.length > 0) {
        isMultiColumn = true;
    }
    return isMultiColumn;
}

RDL.visitedIndex = 0;
if (sessionStorage.getItem('visitedIndex')) {
    RDL.visitedIndex = sessionStorage.getItem('visitedIndex');
}
RDL.setVisitedIndex = function (visitedIndex) {
    if (RDL.visitedIndex < visitedIndex) {
        RDL.visitedIndex = visitedIndex;
        sessionStorage.setItem('visitedIndex', visitedIndex);
    }
}

RDL.UpdatePushnami = function () {
    var userUId = RDL.UserClaims ? RDL.UserClaims.user_uid : '';
    if (window.localStorage && window.localStorage.pushnamiSubscriptionStatus && window.localStorage.pushnamiSubscriptionStatus == 'SUBSCRIBED') {
        if (window.Pushnami) {
            Pushnami.update({ "convert": "true" }).prompt();
            Pushnami.update({ "useruid": userUId }).prompt();
        }
        else {
            var script = document.createElement("script");
            script.type = "text/javascript";
            script.src = "https://api.pushnami.com/scripts/v1/pushnami-adv/" + PushnamiID;
            script.onload = function () {
                Pushnami.update({ "convert": "true" }).prompt();
                Pushnami.update({ "useruid": userUId }).prompt();
            };
            document.getElementsByTagName("head")[0].appendChild(script);
        }
    }
}


RDL.HideNanoRep = function (event) {
    var $aHelpHIW = document.getElementById('aHelpHIW'),
        $aHelp = document.getElementById('aHelp');
    if (event.target.id != "aHelp" && event.target.id != "aHelpHIW") {
        toggleClass(document.getElementById('helpBody'), 'd-none');
        if ($aHelpHIW) $aHelpHIW.classList.remove('hover');
        if ($aHelp) $aHelp.classList.remove('hover');
    }
    // First we check if device support touch, otherwise it's click:
    var touchEvent = 'ontouchstart' in window ? 'touchstart' : 'click';
    document.body.removeEventListener(touchEvent, RDL.HideNanoRep, true);
}

RDL.toggleNanoRep = function (event) {
    var $aHelpHIW = document.getElementById('aHelpHIW'),
        $aHelp = document.getElementById('aHelp'),
        // First we check if device support touch, otherwise it's click:
        touchEvent = 'ontouchstart' in window ? 'touchstart' : 'click';

    if (event.currentTarget.id == "aHelp" || event.currentTarget.id == "aHelpHIW") {
        toggleClass(document.getElementById('helpBody'), 'd-none');
        if (hasClass(document.getElementById('helpBody'), 'd-none')) {
            if ($aHelpHIW) $aHelpHIW.classList.remove('hover');
            if ($aHelp) $aHelp.classList.remove('hover');
            document.body.removeEventListener(touchEvent, RDL.HideNanoRep, true);
        }
        else {
            if ($aHelpHIW) $aHelpHIW.classList.add('hover');
            if ($aHelp) $aHelp.classList.add('hover');
            document.body.addEventListener(touchEvent, RDL.HideNanoRep, true);
        }
    }
}

RDL.TriggerInitialPromises = function () {
    if (!(window.RDL && RDL.LowerVersionBroswer)) {
        if (RDL.UserClaims && RDL.UserClaims.user_uid) {
            claimsPromise = Promise.resolve();
            if (!(isTemplateFlow() || isLP27Flow() || RDL.readCookie("ShowTnCLink"))) {
                RDL.createCookie('ShowTnCLink', "1", null);
            }
            handleClaims(JSON.stringify(RDL.UserClaims));
            if(!(isTemplateFlow() || isLP27Flow()) && !RDL.readCookie("ShowTnCLink"))
                if (!RDL.readCookie("ShowTnCLink")) {
                    RDL.createCookie('ShowTnCLink', "1", null);
                }
            }
        else {
            claimsPromise = new Promise(function (resolve) {
                //When coming from LP27, we get BDLP cookie but when we come via
                //brightfire/balance affilaites we dont get this cookie 
                //Here we did not included 'bdflow' querystring in this condition 
                //because this qs comes for specific affiliates and for those affilates we show HIW with short funnel
                //So we dont need to to inclue that condition here
                if (isTemplateFlow() || isLP27Flow() || (RDL.UserClaims && RDL.UserClaims.user_uid)) {
                    resolve();
                }
                else {
                    if (!RDL.readCookie("ShowTnCLink")) {
                        RDL.createCookie('ShowTnCLink', "1", null);
                    }
                    if (RDL.isMPR) {
                        RDL.CreateOrGetUser(resolve);
                    }
                    else {
                        RDL.Claims(handleClaims, true, resolve);
                    }
                }
            });
        }


        configPromise = new Promise(function (resolve) {
            callAjax(true, getConfigUrl(), 'GET', true, false, handleConfig, resolve);
        });

        resourcePromise = new Promise(function (resolve) {
            callAjax(true, getLocalizationUrl(), 'GET', true, false, handleLocalizationText, resolve);
        });

        featurePromise = new Promise(function (resolve) {
            getFeatureSet(resolve);
        });

        countryDetailsPromise = new Promise(function (resolve, reject) {
            setCountryDetails(resolve, reject);
        });

        Promise.all([claimsPromise, configPromise, resourcePromise, featurePromise, countryDetailsPromise]).then(function (data) {
            if (data[2]) {
                if (data[1]) {
                    handleLocalizationText(JSON.stringify(data[2]), null, data[1]);
                }
                else {
                    handleLocalizationText(JSON.stringify(data[2]));
                }
                getTemplatesFromFeedbackSystem();

            }
            if (data[1]) {
                configuration.modifyCountryWiseConfig(data[1]);
            }
            RDL.claimsLoaded = true;
            if (RDL.pageLoaded) {
                loadJs(packageUrl, true); // load react main bundle asyn
                if (reqAccountsGuestUserCreation == false && isHandlePostPageLoadCalled == false) {
                    handlePostPageLoad();
                }
            }
            else {
                var pageLoadTimer = setInterval(function () {
                    if (RDL.pageLoaded) {
                        clearInterval(pageLoadTimer);
                        loadJs(packageUrl, true); // load react main bundle asyn
                        if (reqAccountsGuestUserCreation == false && isHandlePostPageLoadCalled == false) {
                            handlePostPageLoad();
                        }
                    }
                }, 100);
            }
            //As of now it's being used for INTL only.

            loadLocalizedDefinitionTips();
            RDL.promiseAllResolveActivity();
        });
    }
    else {
        loadStyleSheet(RDL.Paths.ResourcePath + "styles/font-awesome-5/css/fontawesome5.min.css");
    }
}

// Add Browser/Device specific classes
//var $html = document.documentElement;
var userAgent = navigator.userAgent.toLowerCase(),
    isIE = /*@cc_on!@*/false || !!document.documentMode,
    isEdge = !isIE && !!window.StyleMedia,
    isNewEdge = /Edg\//.test(navigator.userAgent),
    isOldEdge = isEdge && !isNewEdge,
    isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor),
    isSafari = /safari/.test(userAgent) && !/chrome/.test(userAgent),
    safariVersionArray = userAgent.match(/version\/(\d+)/i),
    safariVersion = (safariVersionArray !== null) ? safariVersionArray[1] : "",
    isSafari9 = isSafari && (safariVersion === "9"),
    isMacMachine = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);

if (/MSIE/.test(userAgent) || /Trident/.test(userAgent)) {
    if (/rv:11\.0/.test(userAgent)) $html.classList.add('ie11');
}
if (/firefox/.test(userAgent)) {
    $html.classList.add('firefox');
}

if (isSafari) {
    $html.classList.add('safari');
}

if (/iPad/.test(userAgent)) {
    $html.classList.add('ipad');
}

if (isEdge) {
    $html.classList.add('edge');
    if (/edge\/18\./.test(userAgent)) {
        $html.classList.add('edge18');
    }
}

if (isChrome) {
    $html.classList.add('chrome');
}

function getExperimentVariant(experiment) {
    var variant = 0;
    if (RDL.UserExperiments && experiment && experiment.id && RDL.UserExperiments[experiment.id]) {
        variant = RDL.UserExperiments[experiment.id].variant;
    }
    return variant;
}

function activateGOneTap(container, callback) {
    var gTapJs = 'https://accounts.google.com/gsi/client';
    loadJs(gTapJs);
    window.handleCredentialResponse = function (response) {
        RDL.startPageLoader();
        BOLD.Accounts.loginGoogleToken(response.credential, window.location.href, "RWZ", "Resumes", null, null, null, null).then(function (res) {
            if (res) {
                if (res.status == "USER_SWAP") {
                    callback && callback(res);
                    window.location = RDL.Paths.BasePath + "?welcomeback=1";
                }
                else {
                    handleClaims(JSON.stringify(res.claims));
                    callback && callback(res);
                    setTimeout(function () {
                        RDL.closePageLoader();
                    }, 50);
                }
            }
        });
    }
    var googleOneTapDiv = document.createElement('div');
    googleOneTapDiv.innerHTML = '<div id="g_id_onload"' + 'data-client_id="' + RDL.googleLoginClientID + '"' + 'data-callback="handleCredentialResponse" data-context="signup">' + '</div>';
    document.querySelector(container) && document.querySelector(container).prepend(googleOneTapDiv);
}

function RemoveSelectedIndustryFromLocalStorage() {
    try {
        if (window.localStorage) {
            var storageItemName = "STORAGE_IndustrySelected";
            window.localStorage.removeItem(storageItemName);
        }
    }
    catch (e) {
        console.log('Issue in localStorage access.');
    }
}

function animateJS(elem, prop, valueToSet, time, isDirectProperty, valueUnit, callback, startValue) {
    try {
        var value = startValue ? startValue : (isDirectProperty ? elem[prop] : elem.style[prop])
        value = +value.toString().replace('px', '').replace('%', '');
        var shouldIncrease = true;
        if (value > valueToSet) {
            shouldIncrease = false;
        }
        function frame() {
            try {
                if (shouldIncrease) {
                    value++;
                }
                else {
                    value--;
                }

                if (isDirectProperty) {
                    elem[prop] = value + valueUnit // show frame
                }
                else {
                    elem.style[prop] = value + valueUnit // show frame
                }
                if (shouldIncrease && value >= valueToSet) {  // check finish condition
                    clearInterval(id);
                    callback && callback();
                }
                else if (!shouldIncrease && value <= valueToSet) {  // check finish condition
                    clearInterval(id);
                    callback && callback();
                }
            }
            catch (ex) {
                clearInterval(id);
                callback && callback();
            }
        }
        var id = setInterval(frame, time / (valueToSet > 0 ? valueToSet : time));
    }
    catch (ex) {
        console.log(ex)
    }
}


/* Global site tag (gtag.js) - Google Analytics  
   loadGAScriptWithKey() - common method to add ga scripts 
   gtag() - to push arguments
   Add "gaKey" in config file with value e.g. "gaKey":"some value"  */

function gtag() {
    window.dataLayer.push(arguments);
}

function loadGAScriptWithKey() {
    if (RDL.Portal.gaKey && RDL.Portal.gaKey != null && RDL.Portal.gaKey.length > 0) {
        window.dataLayer = window.dataLayer || [];
        gtag('js', new Date());
        gtag('config', RDL.Portal.gaKey);
        var script = document.createElement('script'),
        src = "https://www.googletagmanager.com/gtag/js?id=" + RDL.Portal.gaKey;
        script.setAttribute("src", src);
        script.async = true;
        script.defer = true;
        if (typeof script != "undefined") {
            document.getElementsByTagName("head")[0].appendChild(script);
        }
    }
}

function checkDoNotTrackSetting() {
    if (window.doNotTrack == "1" || navigator.doNotTrack == "yes" || navigator.doNotTrack == "1" || navigator.msDoNotTrack == "1") {
        // Do Not Track is enabled!  
        return true;
    }
    else
        return false;
}

window.onerror = function (error) {
    if (isChrome && error && error.indexOf("ERR_CACHE_READ_FAILURE") > -1) {
        forceRedirect("/?forceRedirect=CACHE_READ_FAILURE");
    }
}

    //Polyfill for IE children support
    // Overwrites native 'children' prototype.
    // Adds Document & DocumentFragment support for IE9 & Safari.
    // Returns array instead of HTMLCollection.
    ; (function (constructor) {
        if (constructor &&
            constructor.prototype &&
            constructor.prototype.children == null) {
            Object.defineProperty(constructor.prototype, 'children', {
                get: function () {
                    var i = 0, node, nodes = this.childNodes, children = [];
                    while (node = nodes[i++]) {
                        if (node.nodeType === 1) {
                            children.push(node);
                        }
                    }
                    return children;
                }
            });
        }
    })(window.Node || window.Element);
var debounceTimer;
RDL.debounce = function (func, delay) {
    return function () {
        var context = this
        var args = arguments
        clearTimeout(debounceTimer)
        debounceTimer = setTimeout(function () {
            func.apply(context, args)
        }, delay)
    }
}
    (function () {
        if (typeof Object.assign != 'function') {
            // Must be writable: true, enumerable: false, configurable: true
            Object.defineProperty(Object, "assign", {
                value: function assign(target, varArgs) { // .length of function is 2
                    'use strict';
                    if (target == null) { // TypeError if undefined or null
                        throw new TypeError('Cannot convert undefined or null to object');
                    }

                    var to = Object(target);

                    for (var index = 1; index < arguments.length; index++) {
                        var nextSource = arguments[index];

                        if (nextSource != null) { // Skip over if undefined or null
                            for (var nextKey in nextSource) {
                                // Avoid bugs when hasOwnProperty is shadowed
                                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                                    to[nextKey] = nextSource[nextKey];
                                }
                            }
                        }
                    }
                    return to;
                },
                writable: true,
                configurable: true
            });
        }
        String.prototype.insert = function (index, string) {
            if (index > 0)
                return this.substring(0, index) + string + this.substring(index, this.length);
            else
                return string + this;
        };

        if (!Element.prototype.matches) {
            Element.prototype.matches = Element.prototype.msMatchesSelector ||
                Element.prototype.webkitMatchesSelector;
        }

        if (!Element.prototype.closest) {
            Element.prototype.closest = function (s) {
                var el = this;
                if (!document.documentElement.contains(el)) return null;
                do {
                    if (el.matches(s)) return el;
                    el = el.parentElement || el.parentNode;
                } while (el !== null && el.nodeType === 1);
                return null;
            };
        }

    })();